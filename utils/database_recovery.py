# utils/database_recovery.py
import sqlite3
import os
import logging

logger = logging.getLogger(__name__)

def recover_database(db_path='finance.db'):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if os.path.exists(db_path):
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã SQLite
            temp_files = [
                db_path + '-wal',
                db_path + '-shm',
                db_path + '-journal'
            ]
            
            for temp_file in temp_files:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã
            conn = sqlite3.connect(db_path, timeout=30.0)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
            cursor.execute("PRAGMA integrity_check")
            integrity = cursor.fetchone()[0]
            
            if integrity == 'ok':
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª–∞")
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π: {integrity}")
            
            # –í–∫–ª—é—á–∞–µ–º WAL mode
            cursor.execute("PRAGMA journal_mode=WAL")
            cursor.execute("PRAGMA busy_timeout=5000")
            
            conn.close()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        else:
            print("üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    recover_database()