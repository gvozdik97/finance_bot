# utils/financial_charts.py - –ü–†–ê–ö–¢–ò–ß–ù–´–ï –¢–ï–ö–°–¢–û–í–´–ï –ì–†–ê–§–ò–ö–ò

class FinancialCharts:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∏ –ø–æ–Ω—è—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
    """
    
    @staticmethod
    def create_spending_by_category(categories_data: list, width: int = 20) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        if not categories_data:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥"
        
        chart_text = "üìä *–†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:*\n\n"
        
        for category in categories_data[:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 8 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            name = category['name']
            percentage = category['percentage']
            amount = category['amount']
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            bar_length = int(percentage / 100 * width)
            bar = '‚ñà' * bar_length + '‚ñë' * (width - bar_length)
            
            chart_text += f"{name}:\n"
            chart_text += f"{bar} {percentage:.1f}%\n"
            chart_text += f"–°—É–º–º–∞: {amount:,.0f} —Ä—É–±.\n\n"
        
        return chart_text
    
    @staticmethod
    def create_income_vs_expenses(income: float, expenses: float, width: int = 20) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        """
        if income <= 0:
            return "üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
        
        ratio = expenses / income if income > 0 else 0
        savings = income - expenses
        
        chart_text = "üìà *–î–û–•–û–î–´ vs –†–ê–°–•–û–î–´:*\n\n"
        
        # –î–∏–∞–≥—Ä–∞–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤
        income_bar = 'üü¢' * width
        chart_text += f"–î–æ—Ö–æ–¥—ã: {income:,.0f} —Ä—É–±.\n{income_bar}\n\n"
        
        # –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Ö–æ–¥–æ–≤)
        expense_ratio = min(1.0, ratio)
        expense_bar_length = int(expense_ratio * width)
        expense_bar = 'üî¥' * expense_bar_length + '‚ö™' * (width - expense_bar_length)
        
        chart_text += f"–†–∞—Å—Ö–æ–¥—ã: {expenses:,.0f} —Ä—É–±. ({ratio*100:.1f}%)\n{expense_bar}\n\n"
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if savings > 0:
            savings_ratio = savings / income
            savings_bar_length = int(savings_ratio * width)
            savings_bar = 'üí∞' * savings_bar_length + '‚ö™' * (width - savings_bar_length)
            chart_text += f"–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è: +{savings:,.0f} —Ä—É–±.\n{savings_bar}"
        else:
            chart_text += f"‚ö†Ô∏è –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {abs(savings):,.0f} —Ä—É–±."
        
        return chart_text
    
    @staticmethod
    def create_monthly_trend(monthly_data: list) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –º–µ—Å—è—á–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏
        """
        if not monthly_data:
            return "üìÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"
        
        chart_text = "üìÖ *–î–ò–ù–ê–ú–ò–ö–ê –ü–û –ú–ï–°–Ø–¶–ê–ú:*\n\n"
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        max_value = max([data[1] for data in monthly_data]) if monthly_data else 1
        
        for month, amount in monthly_data[:6]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
            # –£–ø—Ä–æ—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
            month_name = month[-2:]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
            
            # –°–æ–∑–¥–∞–µ–º –±–∞—Ä (–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–∞–∫—Å–∏–º—É–º–∞)
            bar_length = int((amount / max_value) * 15) if max_value > 0 else 0
            bar = '‚ñà' * bar_length
            
            chart_text += f"{month_name}. {amount:,.0f} —Ä—É–±. {bar}\n"
        
        return chart_text
    
    @staticmethod
    def create_savings_progress(gold_reserve: float, monthly_income: float) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        """
        if monthly_income <= 0:
            return "üí∞ –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–¥–µ–∞–ª (6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –ø–æ 10%)
        ideal_savings = monthly_income * 0.1 * 6
        progress_ratio = min(1.0, gold_reserve / ideal_savings) if ideal_savings > 0 else 0
        
        chart_text = "üí∞ *–ü–†–û–ì–†–ï–°–° –ù–ê–ö–û–ü–õ–ï–ù–ò–ô:*\n\n"
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        bar_length = int(progress_ratio * 20)
        bar = 'üí∞' * bar_length + '‚ö™' * (20 - bar_length)
        
        chart_text += f"–¢–µ–∫—É—â–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {gold_reserve:,.0f} —Ä—É–±.\n"
        chart_text += f"–¶–µ–ª—å (6 –º–µ—Å—è—Ü–µ–≤): {ideal_savings:,.0f} —Ä—É–±.\n\n"
        chart_text += f"{bar} {progress_ratio*100:.1f}%\n\n"
        
        if progress_ratio >= 1.0:
            chart_text += "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏!"
        elif progress_ratio >= 0.5:
            chart_text += "üí™ –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        else:
            chart_text += "üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –∫–∞–∂–¥—ã–π –¥–æ—Ö–æ–¥ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ 10%"
        
        return chart_text

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
financial_charts = FinancialCharts()