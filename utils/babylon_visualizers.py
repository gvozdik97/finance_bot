# utils/babylon_visualizers.py - –í–ê–í–ò–õ–û–ù–°–ö–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
from typing import Dict


class BabylonVisualizer:
    """
    –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–∏–ª–µ –¥—Ä–µ–≤–Ω–µ–≥–æ –í–∞–≤–∏–ª–æ–Ω–∞
    –ü–∏—Ä–∞–º–∏–¥—ã, —Ö—Ä–∞–º—ã, —Ä–µ–∫–∏ - –º–µ—Ç–∞—Ñ–æ—Ä—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    """
    
    @staticmethod
    def create_pyramid_chart(health_score: float, components: Dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–∏—Ä–∞–º–∏–¥—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        –ü–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏–º–∏ –∑–∏–∫–∫—É—Ä–∞—Ç–∞–º–∏
        """
        levels = {
            90: "üèõÔ∏è –í–ï–†–®–ò–ù–ê: –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º—É–¥—Ä–æ—Å—Ç—å",
            75: "ü•á –£–†–û–í–ï–ù–¨ 3: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", 
            60: "ü•à –£–†–û–í–ï–ù–¨ 2: –†–æ—Å—Ç",
            40: "ü•â –£–†–û–í–ï–ù–¨ 1: –û—Å–Ω–æ–≤–∞",
            0:  "üéØ –§–£–ù–î–ê–ú–ï–ù–¢: –ù–∞—á–∞–ª–æ –ø—É—Ç–∏"
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        current_level = "üéØ –§–£–ù–î–ê–ú–ï–ù–¢: –ù–∞—á–∞–ª–æ –ø—É—Ç–∏"
        for threshold, level_name in sorted(levels.items(), reverse=True):
            if health_score >= threshold:
                current_level = level_name
                break
        
        pyramid = "üèîÔ∏è *–ü–ò–†–ê–ú–ò–î–ê –§–ò–ù–ê–ù–°–û–í–û–ô –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò*\n\n"
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–∏—Ä–∞–º–∏–¥—ã
        for threshold, level_name in sorted(levels.items(), reverse=True):
            if health_score >= threshold:
                pyramid += f"‚úÖ {level_name}\n"
            else:
                pyramid += f"‚óªÔ∏è {level_name}\n"
        
        pyramid += f"\nüìä –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {current_level}"
        pyramid += f"\nüíé –û–±—â–∏–π —Å—á–µ—Ç: {health_score}/100"
        
        return pyramid
    
    @staticmethod
    def create_temple_progress(debt_progress: float, savings_ratio: float) -> str:
        """
        –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —Ö—Ä–∞–º–∞
        """
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ (–æ—Å–Ω–æ–≤–∞ - –¥–æ–ª–≥–∏, —Å—Ç–µ–Ω—ã - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è)
        foundation = min(100, debt_progress)  # –§—É–Ω–¥–∞–º–µ–Ω—Ç = –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ–ª–≥–∞–º
        walls = min(100, savings_ratio * 2)   # –°—Ç–µ–Ω—ã = –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        
        temple_visual = "üèõÔ∏è *–•–†–ê–ú –í–ê–®–ï–ì–û –ë–û–ì–ê–¢–°–¢–í–ê*\n\n"
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–º–∞
        if foundation >= 90 and walls >= 80:
            temple_visual += "‚ú® –•—Ä–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã!\n"
            temple_visual += "    /¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø\\\n"
            temple_visual += "   / üèõÔ∏è üèõÔ∏è \\\n" 
            temple_visual += "  /_________\\\n"
        elif foundation >= 50:
            temple_visual += "üèóÔ∏è –•—Ä–∞–º —Å—Ç—Ä–æ–∏—Ç—Å—è... –§—É–Ω–¥–∞–º–µ–Ω—Ç –∑–∞–ª–æ–∂–µ–Ω!\n"
            temple_visual += "    /       \\\n"
            temple_visual += "   /  üß± üß±  \\\n"
            temple_visual += "  /_________\\\n"
        else:
            temple_visual += "‚õèÔ∏è –ó–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç...\n"
            temple_visual += "    _________\n"
            temple_visual += "   /         \\\n"
            temple_visual += "  /___üöß___\\\n"
        
        temple_visual += f"\nüìê –§—É–Ω–¥–∞–º–µ–Ω—Ç (–¥–æ–ª–≥–∏): {foundation}%"
        temple_visual += f"\nüß± –°—Ç–µ–Ω—ã (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è): {walls}%"
        
        return temple_visual
    
    @staticmethod
    def create_river_flow_diagram(income: float, expenses: float, savings: float) -> str:
        """
        –î–∏–∞–≥—Ä–∞–º–º–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –≤ –≤–∏–¥–µ —Ä–µ–∫ –í–∞–≤–∏–ª–æ–Ω–∞
        """
        total = income
        if total == 0:
            return "üåä *–î–ï–ù–ï–ñ–ù–´–ï –ü–û–¢–û–ö–ò*\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–≤–∏–∂–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤"
        
        expense_percent = (expenses / total * 100) if total > 0 else 0
        savings_percent = (savings / total * 100) if total > 0 else 0
        
        diagram = "üåä *–†–ï–ö–ò –í–ê–í–ò–õ–û–ù–°–ö–ò–• –§–ò–ù–ê–ù–°–û–í*\n\n"
        diagram += f"üíß –û–±—â–∏–π –ø–æ—Ç–æ–∫: {income:,.0f} —Ä—É–±.\n\n"
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤
        diagram += "üì• –í—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ (–¥–æ—Ö–æ–¥—ã):\n"
        diagram += "‚ñ∞" * 10 + " 100%\n\n"
        
        diagram += "üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏:\n"
        diagram += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {'‚ñ∞' * int(expense_percent / 10)} {expense_percent:.1f}%\n"
        diagram += f"üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è: {'‚ñ∞' * int(savings_percent / 10)} {savings_percent:.1f}%\n"
        
        # –ë–∞–ª–∞–Ω—Å
        balance_percent = 100 - expense_percent - savings_percent
        if balance_percent > 0:
            diagram += f"üíº –û—Å—Ç–∞—Ç–æ–∫: {'‚ñ∞' * int(balance_percent / 10)} {balance_percent:.1f}%\n"
        
        return diagram
    
    @staticmethod
    def create_progress_bar(progress: float, width: int = 10) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = '‚ñà' * int(progress / 100 * width)
        empty = '‚ñë' * (width - int(progress / 100 * width))
        return f"{filled}{empty} {progress:.1f}%"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
babylon_visualizer = BabylonVisualizer()