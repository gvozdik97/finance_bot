# utils/babylon_visualizers.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import math
from datetime import datetime
from services.advanced_analytics import advanced_analytics
from services.wallet_service import wallet_service
from services.debt_service import debt_service

class BabylonVisualizer:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–∏–ª–µ –¥—Ä–µ–≤–Ω–µ–≥–æ –í–∞–≤–∏–ª–æ–Ω–∞
    —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è Telegram
    """
    
    @staticmethod
    def create_financial_pyramid(user_id: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∏—Ä–∞–º–∏–¥—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            health_data = advanced_analytics.calculate_financial_health_score(user_id)
            wallets = wallet_service.get_all_wallets(user_id)
            debts = debt_service.get_active_debts(user_id)
            
            pyramid = "*–ü–ò–†–ê–ú–ò–î–ê –§–ò–ù–ê–ù–°–û–í–û–ô –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –í–ê–í–ò–õ–û–ù–ê*\n\n"
            
            # –£—Ä–æ–≤–Ω–∏ –ø–∏—Ä–∞–º–∏–¥—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
            levels = [
                {
                    'threshold': 90,
                    'name': '–í–ï–†–®–ò–ù–ê: –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º—É–¥—Ä–æ—Å—Ç—å',
                    'condition': health_data['total_score'] >= 90,
                    'metrics': f"–°—á–µ—Ç: {health_data['total_score']}/100"
                },
                {
                    'threshold': 75,
                    'name': '–£–†–û–í–ï–ù–¨ 3: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–æ—Å—Ç',
                    'condition': health_data['total_score'] >= 75,
                    'metrics': f"–ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å: {wallets.get('gold_reserve', 0):,.0f} —Ä—É–±."
                },
                {
                    'threshold': 60,
                    'name': '–£–†–û–í–ï–ù–¨ 2: –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞—Å—Ö–æ–¥–æ–≤',
                    'condition': health_data['total_score'] >= 60,
                    'metrics': f"–ë—é–¥–∂–µ—Ç –∂–∏–∑–Ω–∏: {wallets.get('living_budget', 0):,.0f} —Ä—É–±."
                },
                {
                    'threshold': 40,
                    'name': '–£–†–û–í–ï–ù–¨ 1: –û—Å–Ω–æ–≤–∞ –æ—Å–Ω–æ–≤',
                    'condition': health_data['total_score'] >= 40,
                    'metrics': f"–î–æ–ª–≥–∏: {sum(d.current_amount for d in debts):,.0f} —Ä—É–±."
                },
                {
                    'threshold': 0,
                    'name': '–§–£–ù–î–ê–ú–ï–ù–¢: –ù–∞—á–∞–ª–æ –ø—É—Ç–∏',
                    'condition': True,
                    'metrics': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–∞–≤–∏–ª–æ–Ω!"
                }
            ]
            
            for level in levels:
                status = "‚úÖ" if level['condition'] else "‚óªÔ∏è"
                pyramid += f"{status} {level['name']}\n"
                if level['condition']:
                    pyramid += f"   {level['metrics']}\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            current_level_progress = health_data['total_score']
            progress_bar = BabylonVisualizer.create_progress_bar(current_level_progress)
            
            pyramid += f"\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
            pyramid += f"\n–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {health_data['level']}"
            
            return pyramid
            
        except Exception as e:
            return "–ü–∏—Ä–∞–º–∏–¥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏\n\n–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    @staticmethod
    def create_wealth_temple(user_id: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ö—Ä–∞–º–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        try:
            health_data = advanced_analytics.calculate_financial_health_score(user_id)
            wallets = wallet_service.get_all_wallets(user_id)
            debts = debt_service.get_active_debts(user_id)
            
            total_wealth = sum(wallets.values())
            debt_progress = 100 - (sum(d.current_amount for d in debts) / (sum(d.initial_amount for d in debts) * 100)) if debts else 100
            savings_progress = min(100, (wallets.get('gold_reserve', 0) / max(1, total_wealth) * 200))
            
            temple = "*–•–†–ê–ú –í–ê–®–ï–ì–û –ë–û–ì–ê–¢–°–¢–í–ê*\n\n"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —Ö—Ä–∞–º–∞
            construction_stage = min(4, int(health_data['total_score'] / 25))
            
            stages = [
                {
                    'stage': 0,
                    'visual': "    ‚õèÔ∏èüî®\n   /üößüößüöß\\\n  /_________\\\n",
                    'description': "–ó–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç..."
                },
                {
                    'stage': 1,
                    'visual': "    /¬Ø¬Ø¬Ø\\\n   /üß±üß±üß±\\\n  /_________\\\n",
                    'description': "–°—Ç—Ä–æ–∏–º —Å—Ç–µ–Ω—ã..."
                },
                {
                    'stage': 2,
                    'visual': "    /üèõÔ∏è\\\n   /üß±üß±üß±\\\n  /_________\\\n",
                    'description': "–í–æ–∑–≤–æ–¥–∏–º –∫–æ–ª–æ–Ω–Ω—ã..."
                },
                {
                    'stage': 3,
                    'visual': "    /üèõÔ∏èüèõÔ∏è\\\n   /üß±üèõÔ∏èüß±\\\n  /_________\\\n",
                    'description': "–£–∫—Ä–∞—à–∞–µ–º —Ö—Ä–∞–º..."
                },
                {
                    'stage': 4,
                    'visual': "   ‚ú®üèõÔ∏è‚ú®\n  /üèõÔ∏èüèõÔ∏èüèõÔ∏è\\\n /_________\\\n",
                    'description': "–•—Ä–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω!"
                }
            ]
            
            temple += stages[construction_stage]['visual']
            temple += f"\n{stages[construction_stage]['description']}\n"
            
            # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            temple += f"\n–§—É–Ω–¥–∞–º–µ–Ω—Ç (—Å–≤–æ–±–æ–¥–∞ –æ—Ç –¥–æ–ª–≥–æ–≤): {debt_progress:.1f}%"
            temple += f"\n–°—Ç–µ–Ω—ã (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è): {savings_progress:.1f}%"
            temple += f"\n–ö–æ–ª–æ–Ω–Ω—ã (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å): {health_data['components'].get('income_stability', 0):.1f}%"
            temple += f"\n–ö—Ä—ã—à–∞ (—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º—É–¥—Ä–æ—Å—Ç—å): {health_data['total_score']:.1f}%"
            
            if construction_stage == 4:
                temple += "\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ —Ö—Ä–∞–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã!"
            
            return temple
            
        except Exception as e:
            return "–•—Ä–∞–º –±–æ–≥–∞—Ç—Å—Ç–≤–∞\n\n–ò–¥–µ—Ç —Ä–∞—Å—á–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤..."
    
    @staticmethod
    def create_river_of_fortune(user_id: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –≤ –≤–∏–¥–µ —Ä–µ–∫ –ú–µ—Å–æ–ø–æ—Ç–∞–º–∏–∏
        """
        try:
            transactions = advanced_analytics.analyze_spending_patterns(user_id)
            wallets = wallet_service.get_all_wallets(user_id)
            
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            monthly_income = 100000
            monthly_expenses = transactions.get('monthly_total', 0)
            monthly_savings = wallets.get('gold_reserve', 0) / 12
            
            diagram = "–†–ï–ö–ò –§–ò–ù–ê–ù–°–û–í–û–ô –£–î–ê–ß–ò\n\n"
            diagram += "–î—Ä–µ–≤–Ω–∏–π –í–∞–≤–∏–ª–æ–Ω —Å—Ç–æ—è–ª –Ω–∞ —Ä–µ–∫–∞—Ö –ï–≤—Ñ—Ä–∞—Ç –∏ –¢–∏–≥—Ä\n"
            diagram += "–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã —Ç–µ–∫—É—Ç –ø–æ–¥–æ–±–Ω–æ —ç—Ç–∏–º —Ä–µ–∫–∞–º:\n\n"
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
            total = max(monthly_income, monthly_expenses + monthly_savings)
            
            if total > 0:
                income_stream = "üåä" * max(1, int(monthly_income / total * 10))
                expense_stream = "üí∏" * max(1, int(monthly_expenses / total * 10))
                savings_stream = "üí∞" * max(1, int(monthly_savings / total * 10))
                
                diagram += f"–ü—Ä–∏—Ç–æ–∫ (–¥–æ—Ö–æ–¥—ã): {income_stream} {monthly_income:,.0f} —Ä—É–±.\n"
                diagram += f"–û—Ç—Ç–æ–∫ (—Ä–∞—Å—Ö–æ–¥—ã): {expense_stream} {monthly_expenses:,.0f} —Ä—É–±.\n"
                diagram += f"–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è: {savings_stream} {monthly_savings:,.0f} —Ä—É–±.\n\n"
                
                # –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
                balance = monthly_income - monthly_expenses - monthly_savings
                if balance > 0:
                    diagram += f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: +{balance:,.0f} —Ä—É–±.\n"
                elif balance < 0:
                    diagram += f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance:,.0f} —Ä—É–±.\n"
                else:
                    diagram += "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏\n"
                
                # –ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞
                savings_ratio = (monthly_savings / monthly_income * 100) if monthly_income > 0 else 0
                if savings_ratio >= 10:
                    diagram += "–ú—É–¥—Ä–æ—Å—Ç—å: –í—ã —Å–æ–±–ª—é–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 10%!"
                else:
                    diagram += "–°–æ–≤–µ—Ç: –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 10% –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –æ—Ç –¥–æ—Ö–æ–¥–æ–≤"
            
            return diagram
            
        except Exception as e:
            return "–†–µ–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É–¥–∞—á–∏\n\n–ò–¥–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤..."
    
    @staticmethod
    def create_zodiac_financial_chart(user_id: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ —Å—Ç–∏–ª–µ –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
        """
        try:
            health_data = advanced_analytics.calculate_financial_health_score(user_id)
            wallets = wallet_service.get_all_wallets(user_id)
            
            # –í–∞–≤–∏–ª–æ–Ω—Å–∫–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            zodiac_signs = [
                "‚ôà –û–≤–µ–Ω", "‚ôâ –¢–µ–ª–µ—Ü", "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã", "‚ôã –†–∞–∫",
                "‚ôå –õ–µ–≤", "‚ôç –î–µ–≤–∞", "‚ôé –í–µ—Å—ã", "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω",
                "‚ôê –°—Ç—Ä–µ–ª–µ—Ü", "‚ôë –ö–æ–∑–µ—Ä–æ–≥", "‚ôí –í–æ–¥–æ–ª–µ–π", "‚ôì –†—ã–±—ã"
            ]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∑–Ω–∞–∫" –ø–æ –±–∞–ª–∞–Ω—Å—É
            financial_balance = sum(wallets.values())
            sign_index = int(str(int(financial_balance))[-1]) % 12
            
            chart = "–§–ò–ù–ê–ù–°–û–í–´–ô –ì–û–†–û–°–ö–û–ü –í–ê–í–ò–õ–û–ù–ê\n\n"
            chart += f"–í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∑–Ω–∞–∫: {zodiac_signs[sign_index]}\n\n"
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
            if health_data['total_score'] >= 80:
                forecast = "–û—Ç–ª–∏—á–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã! –ó–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –≤–∞—à–∏–º —Ñ–∏–Ω–∞–Ω—Å–∞–º."
            elif health_data['total_score'] >= 60:
                forecast = "–•–æ—Ä–æ—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ."
            else:
                forecast = "–í—Ä–µ–º—è –ø–µ—Ä–µ–º–µ–Ω. –ò–∑—É—á–∏—Ç–µ –º—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π."
            
            chart += f"–ü—Ä–æ–≥–Ω–æ–∑: {forecast}\n\n"
            
            # –ê—Å–ø–µ–∫—Ç—ã –≥–æ—Ä–æ—Å–∫–æ–ø–∞
            chart += "–ê—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:\n"
            
            aspects = [
                f"–ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å: {'–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π' if wallets.get('gold_reserve', 0) > 0 else '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}",
                f"–ë—é–¥–∂–µ—Ç –∂–∏–∑–Ω–∏: {'–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π' if wallets.get('living_budget', 0) > 0 else '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π'}",
                f"–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {'–í—ã—Å–æ–∫–∞—è' if health_data['components'].get('income_stability', 0) > 70 else '–°—Ä–µ–¥–Ω—è—è'}",
                f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {'–û—Ç–ª–∏—á–Ω–∞—è' if health_data['components'].get('rule_10_percent', 0) > 80 else '–†–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è'}"
            ]
            
            for aspect in aspects:
                chart += f"‚Ä¢ {aspect}\n"
            
            chart += f"\n–û–±—â–∞—è —ç–Ω–µ—Ä–≥–∏—è: {health_data['total_score']}/100"
            
            return chart
            
        except Exception as e:
            return "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø\n\n–ó–≤–µ–∑–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç—ã –æ–±–ª–∞–∫–∞–º–∏..."
    
    @staticmethod
    def create_progress_bar(progress: float, width: int = 10) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
        filled = '‚ñà' * int(progress / 100 * width)
        empty = '‚ñë' * (width - int(progress / 100 * width))
        return f"{filled}{empty} {progress:.1f}%"
    
    @staticmethod
    def create_monthly_report(user_id: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Å—Ç–∏–ª–µ –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏—Ö –ª–µ—Ç–æ–ø–∏—Å–µ–π
        """
        try:
            health_data = advanced_analytics.calculate_financial_health_score(user_id)
            wallets = wallet_service.get_all_wallets(user_id)
            analysis = advanced_analytics.analyze_spending_patterns(user_id)
            
            current_date = datetime.now()
            month_name = current_date.strftime("%B")
            year = current_date.year
            
            report = f"–õ–ï–¢–û–ü–ò–°–¨ –í–ê–í–ò–õ–û–ù–ê - {month_name.upper()} {year}\n\n"
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É—Ä–æ–≤–Ω–µ–º
            report += f"–¢–∏—Ç—É–ª: {health_data['level']}\n"
            report += f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å—á–µ—Ç: {health_data['total_score']}/100\n\n"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            report += "–¶–ò–§–†–´ –ú–ï–°–Ø–¶–ê:\n"
            report += f"‚Ä¢ –ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å: {wallets.get('gold_reserve', 0):,.0f} —Ä—É–±.\n"
            report += f"‚Ä¢ –ë—é–¥–∂–µ—Ç –∂–∏–∑–Ω–∏: {wallets.get('living_budget', 0):,.0f} —Ä—É–±.\n"
            report += f"‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {analysis.get('monthly_total', 0):,.0f} —Ä—É–±.\n"
            report += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: {analysis.get('total_categories', 0)}\n\n"
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
            report += "–î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ú–ï–°–Ø–¶–ê:\n"
            
            achievements = []
            if health_data['total_score'] > health_data.get('previous_score', 0):
                achievements.append("–£–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è")
            if wallets.get('gold_reserve', 0) > 0:
                achievements.append("–†–æ—Å—Ç –∑–æ–ª–æ—Ç–æ–≥–æ –∑–∞–ø–∞—Å–∞")
            if analysis.get('total_categories', 0) > 0:
                achievements.append("–ê–∫—Ç–∏–≤–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ —É—á–µ—Ç–∞")
            
            if achievements:
                for achievement in achievements:
                    report += f"‚Ä¢ ‚úÖ {achievement}\n"
            else:
                report += "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n"
            
            report += f"\n–ú–£–î–†–û–°–¢–¨ –í–ê–í–ò–õ–û–ù–ê: ¬´–õ–µ—Ç–æ–ø–∏—Å—å –±–æ–≥–∞—Ç—Å—Ç–≤–∞ –ø–∏—à–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏¬ª"
            
            return report
            
        except Exception as e:
            return "–õ–µ—Ç–æ–ø–∏—Å—å –í–∞–≤–∏–ª–æ–Ω–∞\n\n–ü–∏—Å–µ—Ü –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç..."

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
babylon_visualizer = BabylonVisualizer()