# services/transaction_editor.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import logging
from datetime import datetime
from typing import Dict, List, Optional
from database.connection import db_connection
from database.models import Transaction
from services.wallet_service import wallet_service

logger = logging.getLogger(__name__)

class TransactionEditor:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    
    def get_recent_transactions_for_edit(self, user_id: int, limit: int = 5) -> List[Transaction]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT id, user_id, type, amount, category, description, date
                    FROM transactions 
                    WHERE user_id = ? 
                    ORDER BY date DESC, id DESC 
                    LIMIT ?
                ''', (user_id, limit))
                
                transactions = []
                for row in cursor.fetchall():
                    transactions.append(Transaction(*row))
                
                return transactions
                
        except Exception as e:
            logger.error(f"Error getting transactions for edit: {e}")
            return []
    
    def get_transaction_by_id(self, user_id: int, transaction_id: int) -> Optional[Transaction]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ ID"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT id, user_id, type, amount, category, description, date
                    FROM transactions 
                    WHERE id = ? AND user_id = ?
                ''', (transaction_id, user_id))
                
                result = cursor.fetchone()
                
                if result:
                    return Transaction(*result)
                return None
                
        except Exception as e:
            logger.error(f"Error getting transaction by ID: {e}")
            return None
    
    def edit_transaction(self, user_id: int, transaction_id: int, 
                        new_amount: float = None, new_category: str = None,
                        new_description: str = None) -> Dict:
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            original_transaction = self.get_transaction_by_id(user_id, transaction_id)
            if not original_transaction:
                return {'success': False, 'error': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            old_amount = original_transaction.amount
            new_amount = new_amount if new_amount is not None else old_amount
            new_category = new_category if new_category is not None else original_transaction.category
            new_description = new_description if new_description is not None else original_transaction.description
            
            # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—É–º–º–∞, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            if old_amount != new_amount:
                self._recalculate_balances(user_id, original_transaction, old_amount, new_amount)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE transactions 
                    SET amount = ?, category = ?, description = ?, date = CURRENT_TIMESTAMP
                    WHERE id = ? AND user_id = ?
                ''', (new_amount, new_category, new_description, transaction_id, user_id))
                
                conn.commit()
            
            return {
                'success': True,
                'message': self._get_edit_success_message(original_transaction, new_amount, new_category),
                'changes': {
                    'amount_changed': old_amount != new_amount,
                    'old_amount': old_amount,
                    'new_amount': new_amount
                }
            }
            
        except Exception as e:
            logger.error(f"Error editing transaction: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'}
    
    def _recalculate_balances(self, user_id: int, transaction: Transaction, 
                            old_amount: float, new_amount: float):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        amount_diff = new_amount - old_amount
        
        if transaction.type == 'income':
            # –î–ª—è –¥–æ—Ö–æ–¥–æ–≤: –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            from services.user_settings_service import user_settings_service
            settings = user_settings_service.get_user_settings(user_id)
            savings_rate = settings.savings_rate if settings else 10.0
            
            gold_reserve_diff = round(amount_diff * (savings_rate / 100), 2)
            living_budget_diff = amount_diff - gold_reserve_diff
            
            wallet_service.update_wallet_balance(user_id, 'gold_reserve', gold_reserve_diff)
            wallet_service.update_wallet_balance(user_id, 'living_budget', living_budget_diff)
            
        else:  # expense
            # –î–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤: –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±—é–¥–∂–µ—Ç –Ω–∞ –∂–∏–∑–Ω—å
            wallet_service.update_wallet_balance(user_id, 'living_budget', -amount_diff)
    
    def _get_edit_success_message(self, transaction: Transaction, 
                                new_amount: float, new_category: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        emoji = "üí≥" if transaction.type == 'income' else "üí∏"
        type_text = "–¥–æ—Ö–æ–¥" if transaction.type == 'income' else "—Ä–∞—Å—Ö–æ–¥"
        
        return (f"‚úÖ *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
                f"{emoji} *{type_text.capitalize()}*\n"
                f"‚Ä¢ –°—É–º–º–∞: {new_amount:,.0f} —Ä—É–±.\n"
                f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {new_category}\n"
                f"‚Ä¢ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üí° –ë–∞–ª–∞–Ω—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã")
    
    def delete_transaction(self, user_id: int, transaction_id: int) -> Dict:
        """–£–¥–∞–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–æ–≤"""
        try:
            transaction = self.get_transaction_by_id(user_id, transaction_id)
            if not transaction:
                return {'success': False, 'error': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤–ª–∏—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å—ã
            if transaction.type == 'income':
                # –î–ª—è –¥–æ—Ö–æ–¥–æ–≤: –≤—ã—á–∏—Ç–∞–µ–º –∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤
                from services.user_settings_service import user_settings_service
                settings = user_settings_service.get_user_settings(user_id)
                savings_rate = settings.savings_rate if settings else 10.0
                
                gold_reserve_revert = -round(transaction.amount * (savings_rate / 100), 2)
                living_budget_revert = -(transaction.amount - abs(gold_reserve_revert))
                
                wallet_service.update_wallet_balance(user_id, 'gold_reserve', gold_reserve_revert)
                wallet_service.update_wallet_balance(user_id, 'living_budget', living_budget_revert)
                
            else:  # expense
                # –î–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –≤ –±—é–¥–∂–µ—Ç
                wallet_service.update_wallet_balance(user_id, 'living_budget', transaction.amount)
            
            # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    DELETE FROM transactions 
                    WHERE id = ? AND user_id = ?
                ''', (transaction_id, user_id))
                
                conn.commit()
            
            return {
                'success': True,
                'message': f"üóëÔ∏è *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!*\n\n–ë–∞–ª–∞–Ω—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã"
            }
            
        except Exception as e:
            logger.error(f"Error deleting transaction: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
transaction_editor = TransactionEditor()