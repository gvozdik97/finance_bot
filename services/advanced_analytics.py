# services/advanced_analytics.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from database.connection import db_connection
from services.wallet_service import wallet_service
from services.transaction_service import transaction_service
from services.debt_service import debt_service

logger = logging.getLogger(__name__)

class AdvancedAnalyticsService:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ –¥—Ä–µ–≤–Ω–µ–≥–æ –í–∞–≤–∏–ª–æ–Ω–∞
    –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏, KPI –∏ —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    
    def __init__(self):
        self.conn = db_connection
    
    def calculate_financial_health_score(self, user_id: int) -> Dict:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è (0-100)
        –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
        """
        try:
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–ø–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑)
            wallets = wallet_service.get_all_wallets(user_id)
            debts = debt_service.get_active_debts(user_id)
            transactions = transaction_service.get_transaction_history(user_id, 100)
            
            # 1. –ü—Ä–∞–≤–∏–ª–æ 10% (–í–µ—Å: 30%)
            rule_10_percent = self._calculate_10_percent_score(wallets, transactions)
            
            # 2. –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞—Å—Ö–æ–¥–æ–≤ (–í–µ—Å: 25%)
            expense_control = self._calculate_expense_control_score(wallets, transactions)
            
            # 3. –°–≤–æ–±–æ–¥–∞ –æ—Ç –¥–æ–ª–≥–æ–≤ (–í–µ—Å: 20%)
            debt_freedom = self._calculate_debt_freedom_score(debts)
            
            # 4. –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–æ–≤ (–í–µ—Å: 15%)
            income_stability = self._calculate_income_stability_score(transactions)
            
            # 5. –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–í–µ—Å: 10%)
            savings_habit = self._calculate_savings_habit_score(wallets, transactions)
            
            # –û–±—â–∏–π —Å—á–µ—Ç (–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞)
            total_score = (
                rule_10_percent * 0.30 +
                expense_control * 0.25 +
                debt_freedom * 0.20 +
                income_stability * 0.15 +
                savings_habit * 0.10
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ë–ï–ó –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ calculate_financial_health_score
            recommendations = self._generate_recommendations_direct(
                rule_10_percent, expense_control, debt_freedom, income_stability, savings_habit
            )
            
            return {
                'total_score': round(total_score, 1),
                'components': {
                    'rule_10_percent': round(rule_10_percent, 1),
                    'expense_control': round(expense_control, 1),
                    'debt_freedom': round(debt_freedom, 1),
                    'income_stability': round(income_stability, 1),
                    'savings_habit': round(savings_habit, 1)
                },
                'level': self._get_financial_level(total_score),
                'recommendations': recommendations
            }
            
        except Exception as e:
            logger.error(f"Financial health calculation error: {e}")
            return {
                'total_score': 0, 
                'components': {}, 
                'level': '–ù–æ–≤–∏—á–æ–∫', 
                'recommendations': ['–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π']
            }
    
    def _calculate_10_percent_score(self, wallets: Dict, transactions: List) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ 10%"""
        gold_reserve = wallets.get('gold_reserve', 0)
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
        recent_income = self._calculate_recent_income(transactions, days=90)
        
        if recent_income == 0:
            return 0.0
        
        actual_percentage = (gold_reserve / recent_income * 100) if recent_income > 0 else 0
        target_percentage = 10.0
        
        # –û—Ü–µ–Ω–∫–∞: —á–µ–º –±–ª–∏–∂–µ –∫ 10%, —Ç–µ–º –≤—ã—à–µ –±–∞–ª–ª
        score = max(0, min(100, (actual_percentage / target_percentage * 100)))
        return score
    
    def _calculate_expense_control_score(self, wallets: Dict, transactions: List) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        living_budget = wallets.get('living_budget', 0)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        recent_expenses = self._calculate_recent_expenses(transactions, days=30)
        
        if living_budget == 0:
            return 50.0  # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        
        # –ò–¥–µ–∞–ª: —Ä–∞—Å—Ö–æ–¥—ã —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 80-90% –æ—Ç –±—é–¥–∂–µ—Ç–∞ –∂–∏–∑–Ω–∏
        expense_ratio = (recent_expenses / living_budget * 100) if living_budget > 0 else 0
        ideal_min, ideal_max = 70, 90
        
        if expense_ratio < ideal_min:
            # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç—Ä–∞—Ç–∏–º (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ —É—á–∏—Ç—ã–≤–∞–µ–º)
            score = (expense_ratio / ideal_min * 100) * 0.8
        elif expense_ratio <= ideal_max:
            # –ò–¥–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
            score = 100.0
        else:
            # –ü—Ä–µ–≤—ã—à–∞–µ–º –±—é–¥–∂–µ—Ç
            overspend = expense_ratio - ideal_max
            score = max(0, 100 - (overspend * 2))
        
        return score
    
    def _calculate_debt_freedom_score(self, debts: List) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å–≤–æ–±–æ–¥—ã –æ—Ç –¥–æ–ª–≥–æ–≤"""
        if not debts:
            return 100.0  # –ù–µ—Ç –¥–æ–ª–≥–æ–≤ - –∏–¥–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
        
        total_debt = sum(debt.current_amount for debt in debts)
        total_initial = sum(debt.initial_amount for debt in debts)
        
        if total_initial == 0:
            return 0.0
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–≥–∞—à–µ–Ω–∏—è (—á–µ–º –±–æ–ª—å—à–µ –ø–æ–≥–∞—à–µ–Ω–æ, —Ç–µ–º –≤—ã—à–µ –±–∞–ª–ª)
        progress = ((total_initial - total_debt) / total_initial * 100)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ —Ä–∞–∑–º–µ—Ä –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        debt_burden_score = max(0, 100 - (total_debt / 10000))  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
        
        return (progress + debt_burden_score) / 2
    
    def _calculate_income_stability_score(self, transactions: List) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Ö–æ–¥–æ–≤"""
        income_transactions = [t for t in transactions if t[0] == 'income']
        
        if len(income_transactions) < 2:
            return 50.0  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –¥–æ—Ö–æ–¥–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 3 –º–µ—Å—è—Ü–∞)
        amounts = [t[1] for t in income_transactions[:6]]
        avg_income = sum(amounts) / len(amounts)
        
        if avg_income == 0:
            return 0.0
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (–º–µ–Ω—å—à–µ = —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ)
        variance = sum((x - avg_income) ** 2 for x in amounts) / len(amounts)
        std_dev = variance ** 0.5
        cv = (std_dev / avg_income * 100)
        
        # –û—Ü–µ–Ω–∫–∞: —á–µ–º –º–µ–Ω—å—à–µ –≤–∞—Ä–∏–∞—Ü–∏—è, —Ç–µ–º –≤—ã—à–µ –±–∞–ª–ª
        score = max(0, 100 - min(cv, 100))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º cv 100%
        return score
    
    def _calculate_savings_habit_score(self, wallets: Dict, transactions: List) -> float:
        """–û—Ü–µ–Ω–∫–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""
        gold_reserve = wallets.get('gold_reserve', 0)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
        savings_transactions = [t for t in transactions if t[0] == 'income']
        
        if not savings_transactions or gold_reserve == 0:
            return 0.0
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: —á–µ–º –±–æ–ª—å—à–µ –∑–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Ö–æ–¥–æ–≤, —Ç–µ–º –ª—É—á—à–µ
        recent_income = self._calculate_recent_income(transactions, days=90)
        if recent_income == 0:
            return 0.0
        
        savings_ratio = (gold_reserve / recent_income * 100)
        score = min(100, savings_ratio * 2)  # 50% —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ = 100 –±–∞–ª–ª–æ–≤
        
        return score
    
    def _calculate_recent_income(self, transactions: List, days: int = 30) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –±–µ—Ä–µ–º –≤—Å–µ –¥–æ—Ö–æ–¥—ã –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        return sum(t[1] for t in transactions if t[0] == 'income')
    
    def _calculate_recent_expenses(self, transactions: List, days: int = 30) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –±–µ—Ä–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        return sum(t[1] for t in transactions if t[0] == 'expense')
    
    def _get_financial_level(self, score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è"""
        if score >= 90:
            return "üèõÔ∏è –ú—É–¥—Ä–µ—Ü –í–∞–≤–∏–ª–æ–Ω–∞"
        elif score >= 75:
            return "ü•á –ó–æ–ª–æ—Ç–æ–π —É—Ä–æ–≤–µ–Ω—å"
        elif score >= 60:
            return "ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
        elif score >= 40:
            return "ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"
        else:
            return "üéØ –ù–æ–≤–∏—á–æ–∫"
    
    def _generate_recommendations_direct(self, rule_10: float, expense_ctrl: float, 
                                       debt_free: float, income_stab: float, savings: float) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)"""
        recommendations = []
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        avg_score = (rule_10 + expense_ctrl + debt_free + income_stab + savings) / 5
        
        if avg_score < 60:
            recommendations.append("üí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ 10% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–æ—Ö–æ–¥–∞")
        
        if avg_score < 40:
            recommendations.append("üéØ *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* –°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–æ–ª–æ—Ç–æ–≥–æ –∑–∞–ø–∞—Å–∞")
        
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–∞–±—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        if rule_10 < 80:
            recommendations.append("üí∞ *–£–ª—É—á—à–µ–Ω–∏–µ:* –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—é 10% –æ—Ç –¥–æ—Ö–æ–¥–æ–≤")
        
        if debt_free < 50:
            recommendations.append("üèõÔ∏è *–¶–µ–ª—å:* –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–ª–∞–Ω –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤")
        
        if expense_ctrl < 60:
            recommendations.append("üìä *–ê–Ω–∞–ª–∏–∑:* –ò–∑—É—á–∏—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        if income_stab < 50:
            recommendations.append("üìà *–†–∞–∑–≤–∏—Ç–∏–µ:* –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤")
        
        if len(recommendations) == 0:
            recommendations.append("üéâ *–û—Ç–ª–∏—á–Ω–æ!* –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
        
        return recommendations
    
    def predict_savings_timeline(self, user_id: int, target_amount: float) -> Dict:
        """
        –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        """
        try:
            transactions = transaction_service.get_transaction_history(user_id, 90)
            wallets = wallet_service.get_all_wallets(user_id)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ç–µ–º–ø–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
            monthly_income = self._calculate_monthly_income(transactions)
            monthly_savings = monthly_income * 0.10  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ 10%
            
            current_savings = wallets.get('gold_reserve', 0)
            remaining = max(0, target_amount - current_savings)
            
            if monthly_savings <= 0:
                return {
                    'achievable': False,
                    'message': "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö."
                }
            
            months_needed = remaining / monthly_savings
            
            return {
                'achievable': True,
                'current_savings': current_savings,
                'monthly_savings': monthly_savings,
                'months_needed': months_needed,
                'estimated_date': (datetime.now() + timedelta(days=months_needed * 30)).strftime('%d.%m.%Y'),
                'recommendation': self._get_savings_recommendation(monthly_savings, target_amount)
            }
            
        except Exception as e:
            logger.error(f"Savings prediction error: {e}")
            return {'achievable': False, 'message': '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞'}
    
    def _calculate_monthly_income(self, transactions: List) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥"""
        income_transactions = [t for t in transactions if t[0] == 'income']
        
        if not income_transactions:
            return 0.0
        
        # –ë–µ—Ä–µ–º –¥–æ—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
        recent_income = sum(t[1] for t in income_transactions[:6])
        monthly_avg = recent_income / 3 if recent_income > 0 else 0
        
        return monthly_avg
    
    def _get_savings_recommendation(self, monthly_savings: float, target: float) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º"""
        if monthly_savings <= 0:
            return "üí° –ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤"
        
        time_years = (target / monthly_savings) / 12
        
        if time_years > 5:
            return "üéØ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ —ç–∫–æ–Ω–æ–º–∏–∏"
        elif time_years > 2:
            return "üí™ –•–æ—Ä–æ—à–∏–π —Ç–µ–º–ø! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ"
        else:
            return "üöÄ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –¶–µ–ª—å –±–ª–∏–∑–∫–∞"
    
    def analyze_spending_patterns(self, user_id: int) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –≤—ã—è–≤–ª—è–µ—Ç —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
        """
        try:
            conn = self.conn.get_connection()
            cursor = conn.cursor()
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            cursor.execute('''
                SELECT category, SUM(amount) as total, COUNT(*) as count
                FROM transactions 
                WHERE user_id = ? AND type = 'expense' 
                AND date >= date('now', '-30 days')
                GROUP BY category
                ORDER BY total DESC
            ''', (user_id,))
            
            patterns = cursor.fetchall()
            conn.close()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            if not patterns:
                conn = self.conn.get_connection()
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT category, SUM(amount) as total, COUNT(*) as count
                    FROM transactions 
                    WHERE user_id = ? AND type = 'expense'
                    GROUP BY category
                    ORDER BY total DESC
                ''', (user_id,))
                patterns = cursor.fetchall()
                conn.close()
            
            analysis = {
                'total_categories': len(patterns),
                'top_categories': [],
                'insights': [],
                'monthly_total': sum(row[1] for row in patterns)
            }
            
            for category, total, count in patterns[:5]:  # –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                analysis['top_categories'].append({
                    'category': category,
                    'amount': total,
                    'percentage': (total / analysis['monthly_total'] * 100) if analysis['monthly_total'] > 0 else 0,
                    'frequency': count
                })
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
            analysis['insights'] = self._generate_spending_insights(analysis)
            
            return analysis
            
        except Exception as e:
            logger.error(f"Spending analysis error: {e}")
            return {
                'total_categories': 0,
                'top_categories': [],
                'insights': ['–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤'],
                'monthly_total': 0
            }
    
    def _generate_spending_insights(self, analysis: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        insights = []
        top_categories = analysis.get('top_categories', [])
        
        if not top_categories:
            insights.append("üìä –ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")
            return insights
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if len(top_categories) >= 3:
            top3_percentage = sum(cat['percentage'] for cat in top_categories[:3])
            if top3_percentage > 70:
                insights.append("üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ 3-—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏
        for category in top_categories:
            if category['percentage'] > 30:  # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è > 30%
                insights.append(f"üí° {category['category']} - –∫—Ä—É–ø–Ω–∞—è —Å—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤")
        
        if len(insights) == 0:
            insights.append("‚úÖ –†–∞—Å—Ö–æ–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ")
        
        return insights

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
advanced_analytics = AdvancedAnalyticsService()