# finance_bot/services/report_service.py

import io
import logging
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from services.transaction_service import transaction_service

class ReportService:
    def __init__(self):
        self.setup_styles()
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        plt.style.use('seaborn-v0_8')
        sns.set_palette("husl")
    
    def get_period_data(self, period_type: str) -> tuple:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞"""
        now = datetime.now()
        
        if period_type == 'current':
            start_date = now.replace(day=1)
            end_date = now
            period_name = "—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
        elif period_type == 'previous':
            end_date = now.replace(day=1) - timedelta(days=1)
            start_date = end_date.replace(day=1)
            period_name = "–ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"
        else:
            days = int(period_type)
            end_date = now
            start_date = end_date - timedelta(days=days)
            
            if days == 7:
                period_name = "–Ω–µ–¥–µ–ª—é"
            elif days == 30:
                period_name = "–º–µ—Å—è—Ü"
            elif days == 90:
                period_name = "–∫–≤–∞—Ä—Ç–∞–ª"
            else:
                period_name = "–≥–æ–¥"
        
        return start_date, end_date, period_name
    
    def generate_report(self, user_id: int, period_type: str) -> dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        try:
            start_date, end_date, period_name = self.get_period_data(period_type)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            transactions = transaction_service.get_user_transactions(
                user_id, start_date=start_date, end_date=end_date
            )
            
            if not transactions:
                return {'success': False, 'error': f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period_name}."}
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            df = pd.DataFrame([(t.type, t.amount, t.category, t.date) for t in transactions],
                            columns=['type', 'amount', 'category', 'date'])
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            image_buffer = self.create_report_chart(df)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
            report_text = self.generate_report_text(df, period_name)
            
            return {
                'success': True,
                'image_buffer': image_buffer,
                'report_text': report_text,
                'period_name': period_name
            }
            
        except Exception as e:
            logging.error(f"Report generation error: {e}")
            return {'success': False, 'error': "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞."}
    
    def create_report_chart(self, df: pd.DataFrame) -> io.BytesIO:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –æ—Ç—á–µ—Ç–∞"""
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 10))
        
        # 1. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        expenses = df[df['type'] == 'expense']
        if not expenses.empty:
            expense_by_category = expenses.groupby('category')['amount'].sum()
            ax1.pie(expense_by_category.values, labels=expense_by_category.index, autopct='%1.1f%%')
            ax1.set_title('–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
        
        # 2. –î–æ—Ö–æ–¥—ã vs —Ä–∞—Å—Ö–æ–¥—ã
        summary = df.groupby('type')['amount'].sum()
        income = summary.get('income', 0)
        expense = summary.get('expense', 0)
        
        if income > 0 or expense > 0:
            ax2.bar(['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã'], [income, expense], color=['green', 'red'])
            ax2.set_title('–î–æ—Ö–æ–¥—ã vs –†–∞—Å—Ö–æ–¥—ã')
        
        # 3. –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
        df['date'] = pd.to_datetime(df['date'])
        daily = df.groupby('date')['amount'].sum()
        ax3.plot(daily.index, daily.values, marker='o')
        ax3.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º')
        ax3.tick_params(axis='x', rotation=45)
        
        # 4. –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        top_cats = df.groupby('category')['amount'].sum().nlargest(5)
        ax4.barh(top_cats.index, top_cats.values)
        ax4.set_title('–¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ buffer
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=100)
        buffer.seek(0)
        plt.close()
        
        return buffer
    
    def generate_report_text(self, df: pd.DataFrame, period_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞"""
        summary = df.groupby('type')['amount'].sum()
        income = summary.get('income', 0)
        expense = summary.get('expense', 0)
        margin = income - expense
        margin_percent = (margin / income * 100) if income > 0 else 0
        
        expenses = df[df['type'] == 'expense']
        
        report_text = f"""
üìä *–û—Ç—á–µ—Ç –∑–∞ {period_name}*

‚úÖ –î–æ—Ö–æ–¥—ã: {income:,.0f} —Ä—É–±.
‚ùå –†–∞—Å—Ö–æ–¥—ã: {expense:,.0f} —Ä—É–±.
üí∞ –ú–∞—Ä–∂–∞: {margin:,.0f} —Ä—É–±. ({margin_percent:.1f}%)

*–¢–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤:*
"""
        if not expenses.empty:
            for cat, amount in expenses.groupby('category')['amount'].sum().nlargest(3).items():
                report_text += f"‚Ä¢ {cat}: {amount:,.0f} —Ä—É–±.\n"
        else:
            report_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö\n"
        
        return report_text

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
report_service = ReportService()