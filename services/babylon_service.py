# services/babylon_service.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import logging
import random
from typing import Dict
from database.connection import db_connection

logger = logging.getLogger(__name__)

class BabylonService:
    def __init__(self):
        self.rules = {
            '10_percent_rule': {
                'name': '–ü—Ä–∞–≤–∏–ª–æ 10%',
                'description': '–û—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å 10% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –≤ –ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å',
                'emoji': 'üí∞'
            },
            'control_expenses': {
                'name': '–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞—Å—Ö–æ–¥–æ–≤', 
                'description': '–¢—Ä–∞—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ë—é–¥–∂–µ—Ç–∞ –Ω–∞ –∂–∏–∑–Ω—å (90%)',
                'emoji': 'üíº'
            },
            'debt_free': {
                'name': '–°–≤–æ–±–æ–¥–∞ –æ—Ç –¥–æ–ª–≥–æ–≤',
                'description': '–†–µ–≥—É–ª—è—Ä–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –ø–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤',
                'emoji': 'üèõÔ∏è'
            },
            'wise_investment': {
                'name': '–ú—É–¥—Ä—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
                'description': '–ó–∞—Å—Ç–∞–≤–ª—è—Ç—å –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ—Ö–æ–¥',
                'emoji': 'üìà'
            }
        }
    
    def init_user_rules(self, user_id: int) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∞–≤–∏–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                for rule_name in self.rules.keys():
                    cursor.execute('''
                        INSERT OR IGNORE INTO babylon_rules (user_id, rule_name, progress)
                        VALUES (?, ?, ?)
                    ''', (user_id, rule_name, 0.0))
                
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def get_daily_quote(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ –∫–Ω–∏–≥–∏"""
        quotes = [
            "¬´–ß–∞—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å, –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —É —Ç–µ–±—è¬ª",
            "¬´–ë–æ–≥–∞—Ç—Å—Ç–≤–æ ‚Äî —ç—Ç–æ —Å–∏–ª–∞. –°–æ—Ö—Ä–∞–Ω—è–π —Ö–æ—Ç—è –±—ã –¥–µ—Å—è—Ç—É—é —á–∞—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞¬ª",
            "¬´–ó–æ–ª–æ—Ç–æ –æ—Ö–æ—Ç–Ω–µ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–µ—Å—è—Ç—É—é —á–∞—Å—Ç—å¬ª",
            "¬´–†–∞—Å—Ö–æ–¥—ã –≤—Å–µ–≥–¥–∞ —Ä–∞—Å—Ç—É—Ç –¥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Ö–æ–¥–æ–≤, –µ—Å–ª–∏ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Ö¬ª",
            "¬´–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–ª–∞—Ç–∏ —Å–µ–±–µ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã¬ª",
            "¬´–ö–∞–∂–¥–∞—è –º–æ–Ω–µ—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è —É—Ö–æ–¥–∏—Ç –Ω–∞ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç—Ä–∞—Ç—ã, ‚Äî —ç—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ –±—É–¥—É—â–µ–µ –±–æ–≥–∞—Ç—Å—Ç–≤–æ¬ª"
        ]
        return random.choice(quotes)
    
    def get_welcome_message(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏—Ç–∞—Ç–æ–π"""
        quote = self.get_daily_quote()
        return f"""üèõÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –í–∞–≤–∏–ª–æ–Ω!*

{quote}

*7 –ü—Ä–∞–≤–∏–ª –ë–æ–≥–∞—Ç—Å—Ç–≤–∞ –∏–∑ –î—Ä–µ–≤–Ω–µ–≥–æ –í–∞–≤–∏–ª–æ–Ω–∞:*
1. üí∞ –ù–∞—á–∏–Ω–∞–π —Å–±–µ—Ä–µ–≥–∞—Ç—å ‚Äî –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π 10% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–æ—Ö–æ–¥–∞
2. üíº –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π —Ä–∞—Å—Ö–æ–¥—ã ‚Äî –∂–∏–≤–∏ –Ω–∞ 90% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞  
3. üìà –ü—Ä–∏—É–º–Ω–æ–∂–∞–π –¥–µ–Ω—å–≥–∏ ‚Äî –∑–∞—Å—Ç–∞–≤—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—Ç—å
4. üõ°Ô∏è –û–±–µ—Ä–µ–≥–∞–π –±–æ–≥–∞—Ç—Å—Ç–≤–æ ‚Äî –∏–∑–±–µ–≥–∞–π —Ä–∏—Å–∫–æ–≤—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π
5. üè† –î–µ–ª–∞–π –¥–æ–º –≤—ã–≥–æ–¥–Ω—ã–º –≤–ª–æ–∂–µ–Ω–∏–µ–º
6. üßì –û–±–µ—Å–ø–µ—á—å –±—É–¥—É—â–∏–π –¥–æ—Ö–æ–¥
7. üéØ –ü–æ–≤—ã—à–∞–π —Å–≤–æ—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é

*–ì–æ—Ç–æ–≤ —Å–ª–µ–¥–æ–≤–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç–∏ –¥—Ä–µ–≤–Ω–∏—Ö?*"""
    
    def update_rule_progress(self, user_id: int, rule_name: str, progress: float) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE babylon_rules 
                    SET progress = ?, last_updated = CURRENT_TIMESTAMP
                    WHERE user_id = ? AND rule_name = ?
                ''', (progress, user_id, rule_name))
                
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∞–≤–∏–ª–∞: {e}")
            return False
    
    def get_user_progress(self, user_id: int) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT rule_name, progress FROM babylon_rules 
                    WHERE user_id = ?
                ''', (user_id,))
                
                progress = {row[0]: row[1] for row in cursor.fetchall()}
                
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                for rule_name in self.rules.keys():
                    if rule_name not in progress:
                        progress[rule_name] = 0.0
                
                return progress
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {rule_name: 0.0 for rule_name in self.rules.keys()}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
babylon_service = BabylonService()