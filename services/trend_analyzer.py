# services/trend_analyzer.py - –ù–û–í–´–ô –°–ï–†–í–ò–° –ê–ù–ê–õ–ò–¢–ò–ö–ò –¢–†–ï–ù–î–û–í

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from database.connection import db_connection

logger = logging.getLogger(__name__)

class TrendAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    """
    
    def __init__(self):
        self.conn = db_connection
    
    def analyze_income_trends(self, user_id: int) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
        """
        try:
            conn = self.conn.get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
            cursor.execute('''
                SELECT strftime('%Y-%m', date) as month, 
                       SUM(amount) as monthly_income
                FROM transactions 
                WHERE user_id = ? AND type = 'income'
                AND date >= date('now', '-6 months')
                GROUP BY strftime('%Y-%m', date)
                ORDER BY month DESC
            ''', (user_id,))
            
            monthly_data = cursor.fetchall()
            conn.close()
            
            if len(monthly_data) < 2:
                return {
                    'has_data': False,
                    'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤'
                }
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            months = [row[0] for row in monthly_data]
            incomes = [row[1] for row in monthly_data]
            
            # –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
            trend_direction = self._calculate_trend_direction(incomes)
            volatility = self._calculate_volatility(incomes)
            growth_rate = self._calculate_growth_rate(incomes)
            
            return {
                'has_data': True,
                'trend_direction': trend_direction,
                'volatility': volatility,
                'growth_rate': growth_rate,
                'average_income': sum(incomes) / len(incomes),
                'latest_income': incomes[0],
                'months_analyzed': len(months),
                'forecast': self._generate_income_forecast(incomes, trend_direction)
            }
            
        except Exception as e:
            logger.error(f"Income trend analysis error: {e}")
            return {'has_data': False, 'message': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'}
    
    def analyze_expense_patterns(self, user_id: int) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –≤—ã—è–≤–ª—è–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        """
        try:
            conn = self.conn.get_connection()
            cursor = conn.cursor()
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –º–µ—Å—è—Ü–∞–º
            cursor.execute('''
                SELECT category, strftime('%Y-%m', date) as month,
                       SUM(amount) as monthly_expense
                FROM transactions 
                WHERE user_id = ? AND type = 'expense'
                AND date >= date('now', '-6 months')
                GROUP BY category, strftime('%Y-%m', date)
                ORDER BY month DESC, monthly_expense DESC
            ''', (user_id,))
            
            category_data = cursor.fetchall()
            conn.close()
            
            if not category_data:
                return {'has_data': False, 'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö'}
            
            # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            patterns = self._identify_spending_patterns(category_data)
            recommendations = self._generate_expense_recommendations(patterns)
            
            return {
                'has_data': True,
                'total_categories': len(set(row[0] for row in category_data)),
                'spending_patterns': patterns,
                'recommendations': recommendations,
                'average_monthly_expense': self._calculate_average_expense(category_data)
            }
            
        except Exception as e:
            logger.error(f"Expense pattern analysis error: {e}")
            return {'has_data': False, 'message': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'}
    
    def _calculate_trend_direction(self, values: List[float]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞"""
        if len(values) < 2:
            return "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π"
        
        first_half = values[:len(values)//2]
        second_half = values[len(values)//2:]
        
        avg_first = sum(first_half) / len(first_half)
        avg_second = sum(second_half) / len(second_half)
        
        if avg_second > avg_first * 1.1:
            return "—Ä–∞—Å—Ç—É—â–∏–π"
        elif avg_second < avg_first * 0.9:
            return "–ø–∞–¥–∞—é—â–∏–π"
        else:
            return "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π"
    
    def _calculate_volatility(self, values: List[float]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"""
        if len(values) < 2:
            return 0.0
        
        avg = sum(values) / len(values)
        variance = sum((x - avg) ** 2 for x in values) / len(values)
        return (variance ** 0.5) / avg * 100  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤ %
    
    def _calculate_growth_rate(self, values: List[float]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø —Ä–æ—Å—Ç–∞"""
        if len(values) < 2:
            return 0.0
        
        growth_rates = []
        for i in range(1, len(values)):
            if values[i-1] > 0:
                growth_rate = (values[i] - values[i-1]) / values[i-1] * 100
                growth_rates.append(growth_rate)
        
        return sum(growth_rates) / len(growth_rates) if growth_rates else 0.0
    
    def _generate_income_forecast(self, historical_data: List[float], trend: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤"""
        if not historical_data:
            return {'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞'}
        
        last_value = historical_data[0]
        avg_growth = self._calculate_growth_rate(historical_data)
        
        if trend == "—Ä–∞—Å—Ç—É—â–∏–π":
            forecast_3m = last_value * (1 + avg_growth/100 * 3)
            outlook = "–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π"
        elif trend == "–ø–∞–¥–∞—é—â–∏–π":
            forecast_3m = last_value * (1 - abs(avg_growth)/100 * 3)
            outlook = "–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π"
        else:
            forecast_3m = last_value
            outlook = "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π"
        
        return {
            'next_3_months': max(0, forecast_3m),
            'outlook': outlook,
            'confidence': '—Å—Ä–µ–¥–Ω—è—è' if len(historical_data) >= 3 else '–Ω–∏–∑–∫–∞—è'
        }
    
    def _identify_spending_patterns(self, category_data: List) -> List[Dict]:
        """–í—ã—è–≤–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        patterns = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for category, month, amount in category_data:
            if category not in categories:
                categories[category] = []
            categories[category].append((month, amount))
        
        for category, monthly_data in categories.items():
            if len(monthly_data) >= 2:
                amounts = [amount for month, amount in monthly_data]
                trend = self._calculate_trend_direction(amounts)
                volatility = self._calculate_volatility(amounts)
                
                patterns.append({
                    'category': category,
                    'trend': trend,
                    'volatility': volatility,
                    'average_amount': sum(amounts) / len(amounts),
                    'latest_amount': amounts[0]
                })
        
        return sorted(patterns, key=lambda x: x['latest_amount'], reverse=True)
    
    def _generate_expense_recommendations(self, patterns: List[Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º"""
        recommendations = []
        
        for pattern in patterns[:3]:  # –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if pattern['trend'] == "—Ä–∞—Å—Ç—É—â–∏–π" and pattern['volatility'] > 50:
                recommendations.append(
                    f"üí° {pattern['category']}: –≤—ã—Å–æ–∫–∏–π —Ä–æ—Å—Ç –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"
                )
            elif pattern['volatility'] > 80:
                recommendations.append(
                    f"üéØ {pattern['category']}: –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç"
                )
        
        if not recommendations:
            recommendations.append("‚úÖ –†–∞—Å—Ö–æ–¥—ã –≤—ã–≥–ª—è–¥—è—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
        
        return recommendations
    
    def _calculate_average_expense(self, category_data: List) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"""
        monthly_totals = {}
        for category, month, amount in category_data:
            if month not in monthly_totals:
                monthly_totals[month] = 0
            monthly_totals[month] += amount
        
        if monthly_totals:
            return sum(monthly_totals.values()) / len(monthly_totals)
        return 0.0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
trend_analyzer = TrendAnalyzer()