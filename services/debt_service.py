# services/debt_service.py - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô –ë–Æ–î–ñ–ï–¢–ê

import logging
import random
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
from database.connection import db_connection
from database.models import Debt
from services.wallet_service import wallet_service  # ‚úÖ –î–û–ë–ê–í–ò–õ–ò –ò–ú–ü–û–†–¢

logger = logging.getLogger(__name__)

class DebtService:
    """
    –ß–∏—Å—Ç–∞—è –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞–º–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ –±—é–¥–∂–µ—Ç 90%.
    """
    
    def __init__(self):
        self.conn = db_connection
    
    def add_debt(self, user_id: int, creditor: str, amount: float, 
                interest_rate: float = 0.0, due_date: Optional[datetime] = None) -> Dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –¥–æ–ª–≥ —Å –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–π –º—É–¥—Ä–æ—Å—Ç—å—é"""
        # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        try:
            conn = self.conn.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO debts (user_id, creditor, initial_amount, current_amount, 
                                 interest_rate, due_date, status)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, creditor, amount, amount, interest_rate, due_date, 'active'))
            
            conn.commit()
            debt_id = cursor.lastrowid
            conn.close()
            
            wisdom = self._get_debt_wisdom_message(amount, creditor)
            
            return {
                'success': True,
                'debt_id': debt_id,
                'message': f"üèõÔ∏è *–î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
                          f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç–æ—Ä: {creditor}\n"
                          f"‚Ä¢ –°—É–º–º–∞: {amount:,.0f} —Ä—É–±.\n"
                          f"‚Ä¢ –°—Ç–∞–≤–∫–∞: {interest_rate}%\n\n"
                          f"{wisdom}"
            }
            
        except Exception as e:
            logger.error(f"Debt add error: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞'}
    
    def make_payment(self, user_id: int, debt_id: int, amount: float) -> Dict:
        """
        –ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞ —Å –ü–†–û–í–ï–†–ö–û–ô –ë–Æ–î–ñ–ï–¢–ê 90% –∏ —Å–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤
        """
        try:
            # üîí –í–ê–í–ò–õ–û–ù–°–ö–û–ï –ü–†–ê–í–ò–õ–û: –ø–æ–≥–∞—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ –ë—é–¥–∂–µ—Ç–∞ –Ω–∞ –∂–∏–∑–Ω—å (90%)
            affordability = wallet_service.can_afford_expense(user_id, amount)
            
            if not affordability['can_afford']:
                return {
                    'success': False,
                    'error': f"üö´ *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –ë—é–¥–∂–µ—Ç–µ –Ω–∞ –∂–∏–∑–Ω—å!*\n\n"
                            f"üíº –î–æ—Å—Ç—É–ø–Ω–æ: {affordability['available']:,.0f} —Ä—É–±.\n"
                            f"üí∏ –ù—É–∂–Ω–æ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è: {amount:,.0f} —Ä—É–±.\n"
                            f"üìâ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {affordability['shortfall']:,.0f} —Ä—É–±.\n\n"
                            f"üí° *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–∏—Ç—å, –ø–æ—Ç–æ–º –ø–æ–≥–∞—à–∞—Ç—å¬ª"
                }
            
            conn = self.conn.get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ª–≥–µ
            cursor.execute('''
                SELECT current_amount, creditor FROM debts 
                WHERE id = ? AND user_id = ? AND status = 'active'
            ''', (debt_id, user_id))
            
            result = cursor.fetchone()
            if not result:
                return {'success': False, 'error': '–î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            current_amount, creditor = result
            
            if amount > current_amount:
                amount = current_amount  # –ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ–ª–≥–∞
            
            new_amount = current_amount - amount
            status = 'paid' if new_amount <= 0 else 'active'
            
            # üîí –í–ê–í–ò–õ–û–ù–°–ö–û–ï –ü–†–ê–í–ò–õ–û: —Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ë—é–¥–∂–µ—Ç–∞ –Ω–∞ –∂–∏–∑–Ω—å
            wallet_service.update_wallet_balance(user_id, 'living_budget', -amount)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–≥
            cursor.execute('''
                UPDATE debts 
                SET current_amount = ?, status = ?
                WHERE id = ? AND user_id = ?
            ''', (new_amount, status, debt_id, user_id))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏ (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
            cursor.execute('''
                INSERT INTO debt_payments (user_id, debt_id, amount, payment_date)
                VALUES (?, ?, ?, CURRENT_TIMESTAMP)
            ''', (user_id, debt_id, amount))
            
            conn.commit()
            conn.close()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∞–≤–∏–ª–∞ "–°–≤–æ–±–æ–¥–∞ –æ—Ç –¥–æ–ª–≥–æ–≤"
            self._update_debt_rule_progress(user_id)
            
            wisdom = self._get_payment_wisdom_message(amount, creditor, status)
            new_budget_balance = affordability['available'] - amount
            
            return {
                'success': True,
                'message': f"üéâ *–ü–ª–∞—Ç–µ–∂ –ø–æ –¥–æ–ª–≥—É –≤—ã–ø–æ–ª–Ω–µ–Ω!*\n\n"
                          f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç–æ—Ä: {creditor}\n"
                          f"‚Ä¢ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {amount:,.0f} —Ä—É–±.\n"
                          f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {new_amount:,.0f} —Ä—É–±.\n"
                          f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–≥–∞—à–µ–Ω' if status == 'paid' else 'üìã –ê–∫—Ç–∏–≤–µ–Ω'}\n"
                          f"‚Ä¢ üíº –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –±—é–¥–∂–µ—Ç–∞: {new_budget_balance:,.0f} —Ä—É–±.\n\n"
                          f"{wisdom}"
            }
            
        except Exception as e:
            logger.error(f"Debt payment error: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏ –¥–æ–ª–≥–∞'}
    
    def get_debt_statistics(self, user_id: int) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–ª–≥–∞–º —Å –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
        """
        debts = self.get_active_debts(user_id)
        total_debt = sum(debt.current_amount for debt in debts)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        budget_balance = wallet_service.get_wallet_balance(user_id, 'living_budget')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        debt_to_budget_ratio = (total_debt / budget_balance * 100) if budget_balance > 0 else float('inf')
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
        if total_debt == 0:
            recommendation = "üéâ –ò–¥–µ–∞–ª—å–Ω–æ! –í—ã —Å–≤–æ–±–æ–¥–Ω—ã –æ—Ç –¥–æ–ª–≥–æ–≤–æ–≥–æ –±—Ä–µ–º–µ–Ω–∏."
            risk_level = "üü¢ –ù–∏–∑–∫–∏–π"
        elif debt_to_budget_ratio < 50:
            recommendation = "üí™ –•–æ—Ä–æ—à–æ! –î–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —É–º–µ—Ä–µ–Ω–Ω–∞—è."
            risk_level = "üü° –°—Ä–µ–¥–Ω–∏–π"
        elif debt_to_budget_ratio < 100:
            recommendation = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã—Å–æ–∫–∞—è –¥–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞."
            risk_level = "üü† –í—ã—Å–æ–∫–∏–π"
        else:
            recommendation = "üö® –ö—Ä–∏—Ç–∏—á–Ω–æ! –î–æ–ª–≥–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—é–¥–∂–µ—Ç."
            risk_level = "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
        
        return {
            'total_debt': total_debt,
            'debt_count': len(debts),
            'budget_balance': budget_balance,
            'debt_to_budget_ratio': debt_to_budget_ratio,
            'risk_level': risk_level,
            'recommendation': recommendation,
            'estimated_payoff_time': self._estimate_payoff_time(user_id, total_debt)
        }
    
    def _estimate_payoff_time(self, user_id: int, total_debt: float) -> str:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        """
        if total_debt == 0:
            return "–î–æ–ª–≥–æ–≤ –Ω–µ—Ç"
        
        # –°—Ä–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ (5% –æ—Ç –¥–æ–ª–≥–∞ –∏–ª–∏ 1000 —Ä—É–±., —á—Ç–æ –±–æ–ª—å—à–µ)
        avg_payment = max(1000, total_debt * 0.05)
        months = total_debt / avg_payment
        
        if months < 1:
            return "–º–µ–Ω–µ–µ 1 –º–µ—Å—è—Ü–∞"
        elif months < 12:
            return f"–æ–∫–æ–ª–æ {int(months)} –º–µ—Å—è—Ü–µ–≤"
        else:
            years = months / 12
            return f"–æ–∫–æ–ª–æ {years:.1f} –ª–µ—Ç"
    
    def _update_debt_rule_progress(self, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∞–≤–∏–ª–∞ '–°–≤–æ–±–æ–¥–∞ –æ—Ç –¥–æ–ª–≥–æ–≤'"""
        debts = self.get_active_debts(user_id)
        total_debt = sum(debt.current_amount for debt in debts)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å: 100% –µ—Å–ª–∏ –¥–æ–ª–≥–æ–≤ –Ω–µ—Ç, —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å —Ä–æ—Å—Ç–æ–º –¥–æ–ª–≥–∞
        if total_debt == 0:
            progress = 100.0
        else:
            # –ß–µ–º –º–µ–Ω—å—à–µ –¥–æ–ª–≥, —Ç–µ–º –≤—ã—à–µ –ø—Ä–æ–≥—Ä–µ—Å—Å (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)
            progress = max(0.0, min(100.0, (1 - (total_debt / (total_debt + 50000))) * 100))
        
        from services.babylon_service import babylon_service
        babylon_service.update_rule_progress(user_id, 'debt_free', progress)
    
    def get_recommended_payment_amount(self, user_id: int) -> float:
        """
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
        """
        budget_balance = wallet_service.get_wallet_balance(user_id, 'living_budget')
        debts = self.get_active_debts(user_id)
        
        if not debts or budget_balance <= 0:
            return 0.0
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º 10-20% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 1000 —Ä—É–±.
        recommended = min(budget_balance * 0.2, budget_balance * 0.1)
        return max(1000.0, recommended)
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def get_active_debts(self, user_id: int) -> List[Debt]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self.conn.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, user_id, creditor, initial_amount, current_amount, 
                   interest_rate, due_date, status, created_at
            FROM debts 
            WHERE user_id = ? AND status = 'active'
            ORDER BY current_amount DESC
        ''', (user_id,))
        
        debts = []
        for row in cursor.fetchall():
            debts.append(Debt(*row))
        
        conn.close()
        return debts
    
    def calculate_snowball_plan(self, user_id: int) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –ø–æ–≥–∞—à–µ–Ω–∏—è –ø–æ –º–µ—Ç–æ–¥—É '—Å–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–º–∞'"""
        debts = self.get_active_debts(user_id)
        
        if not debts:
            return {'has_debts': False, 'message': 'üéâ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤!'}
        
        sorted_debts = sorted(debts, key=lambda x: x.current_amount)
        
        plan = []
        total_debt = sum(debt.current_amount for debt in debts)
        
        for i, debt in enumerate(sorted_debts):
            plan.append({
                'priority': i + 1,
                'creditor': debt.creditor,
                'amount': debt.current_amount,
                'recommended_payment': self._calculate_recommended_payment(debt)
            })
        
        return {
            'has_debts': True,
            'total_debt': total_debt,
            'plan': plan,
            'message': self._get_snowball_wisdom_message(total_debt, len(debts))
        }
    
    def _calculate_recommended_payment(self, debt: Debt) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –¥–æ–ª–≥–∞"""
        base_payment = 1000
        percentage = 0.05
        return max(base_payment, debt.current_amount * percentage)
    
    def _get_debt_wisdom_message(self, amount: float, creditor: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–≤–∏–ª–æ–Ω—Å–∫—É—é –º—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞"""
        wisdoms = [
            f"¬´–î–æ–ª–≥ ‚Äî —ç—Ç–æ –≥–æ—Å–ø–æ–¥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Ä–∞–±–æ–º¬ª",
            f"¬´–ú—É–¥—Ä—ã–π —á–µ–ª–æ–≤–µ–∫ –∏–∑–±–µ–≥–∞–µ—Ç –¥–æ–ª–≥–æ–≤, –∫–∞–∫ –∫–æ—Ä–∞–±–ª—å –∏–∑–±–µ–≥–∞–µ—Ç —Å–∫–∞–ª¬ª",
            f"¬´–ü—É—Ç—å –∫ –±–æ–≥–∞—Ç—Å—Ç–≤—É –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ—Ç –¥–æ–ª–≥–æ–≤¬ª"
        ]
        import random
        return f"üí° *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* {random.choice(wisdoms)}"
    
    def _get_payment_wisdom_message(self, amount: float, creditor: str, status: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏ –¥–æ–ª–≥–∞"""
        if status == 'paid':
            return "üéä *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –í—ã –æ—Å–≤–æ–±–æ–¥–∏–ª–∏—Å—å –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–æ–ª–≥–æ–≤—ã—Ö –æ–∫–æ–≤!"
        else:
            return "üí™ *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!* –ö–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ."
    
    def _get_snowball_wisdom_message(self, total_debt: float, num_debts: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º—É–¥—Ä–æ—Å—Ç—å –¥–ª—è –ø–ª–∞–Ω–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è"""
        return f"üèõÔ∏è *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–ü–æ–≥–∞—à–∞–π—Ç–µ –º–∞–ª—ã–µ –¥–æ–ª–≥–∏ –ø–µ—Ä–≤—ã–º–∏ ‚Äî —ç—Ç–æ –¥–∞—Å—Ç —Å–∏–ª—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–æ–±–µ–¥!¬ª"

    def get_debt_freedom_timeline(self, user_id: int) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ—Ç –¥–æ–ª–≥–æ–≤
        """
        debts = self.get_active_debts(user_id)
        total_debt = sum(debt.current_amount for debt in debts)
        
        if total_debt == 0:
            return {
                'is_free': True,
                'message': 'üéâ –í—ã —É–∂–µ —Å–≤–æ–±–æ–¥–Ω—ã –æ—Ç –¥–æ–ª–≥–æ–≤!',
                'timeline': []
            }
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –¥–∞—Ç—ã –ø–æ–≥–∞—à–µ–Ω–∏—è
        monthly_payment = self.get_recommended_payment_amount(user_id)
        timeline = []
        
        current_date = datetime.now()
        remaining_debt = total_debt
        
        for i in range(12):  # –ù–∞ 12 –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä–µ–¥
            if remaining_debt <= 0:
                break
            
            payment_date = current_date + timedelta(days=30 * (i + 1))
            payment_amount = min(monthly_payment, remaining_debt)
            remaining_debt -= payment_amount
            
            timeline.append({
                'month': i + 1,
                'date': payment_date.strftime('%d.%m.%Y'),
                'payment': payment_amount,
                'remaining': remaining_debt,
                'progress': ((total_debt - remaining_debt) / total_debt * 100) if total_debt > 0 else 100
            })
        
        return {
            'is_free': False,
            'total_debt': total_debt,
            'monthly_payment': monthly_payment,
            'estimated_months': len(timeline),
            'timeline': timeline
        }
    
    def get_motivational_message(self, user_id: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        debts = self.get_active_debts(user_id)
        total_debt = sum(debt.current_amount for debt in debts)
        initial_debt = sum(debt.initial_amount for debt in debts)
        
        if total_debt == 0:
            return random.choice([
                "üéä *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã!",
                "üèõÔ∏è *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–°–≤–æ–±–æ–¥–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ ‚Äî –±–æ–≥–∞—Ç—ã–π —á–µ–ª–æ–≤–µ–∫!¬ª",
                "üíé –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –≤–∞—Å, –∞ –Ω–µ –≤—ã –Ω–∞ –¥–æ–ª–≥–∏!"
            ])
        
        progress = ((initial_debt - total_debt) / initial_debt * 100) if initial_debt > 0 else 0
        
        if progress < 25:
            messages = [
                "üí™ *–ù–∞—á–∞–ª–æ –ø—É—Ç–∏!* –ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –±–æ–ª—å—à–æ–π –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —à–∞–≥–∞.",
                "üéØ *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É –≤ –ø–æ–≥–∞—à–µ–Ω–∏–∏ –¥–æ–ª–≥–æ–≤.¬ª",
                "‚õìÔ∏è *–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏* —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ. –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!"
            ]
        elif progress < 50:
            messages = [
                "üöÄ *–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!* –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å –ø—É—Ç–∏.",
                "üîì *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–ú–∞–ª–µ–Ω—å–∫–∏–µ –¥–æ–ª–≥–∏ –∏—Å—á–µ–∑–∞—é—Ç –±—ã—Å—Ç—Ä–æ ‚Äî —ç—Ç–æ –ø—Ä–∏–¥–∞–µ—Ç —Å–∏–ª!¬ª",
                "üìà *–ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞!* –¢–µ–ø–µ—Ä—å –≤—ã –≤–∏–¥–∏—Ç–µ —Å–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Ç–æ–Ω–Ω–µ–ª—è."
            ]
        elif progress < 75:
            messages = [
                "üèÉ *–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä—ã–≤–æ–∫!* –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–æ –ø–æ–ª–Ω–æ–π —Å–≤–æ–±–æ–¥—ã.",
                "üíé *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–ù–µ —Å–±–∞–≤–ª—è–π—Ç–µ —Ç–µ–º–ø –Ω–∞ —Ñ–∏–Ω–∏—à–Ω–æ–π –ø—Ä—è–º–æ–π!¬ª",
                "‚ú® *–ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏!* –í–∞—à–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–±–æ–¥–∞ –±–ª–∏–∑–∫–∞."
            ]
        else:
            messages = [
                "üéä *–§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä—ã!* –í—ã –Ω–∞ –ø–æ—Ä–æ–≥–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã!",
                "üèõÔ∏è *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–∏–ª–∏—è —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ!¬ª",
                "üö™ *–î–≤–µ—Ä—å –∫ —Å–≤–æ–±–æ–¥–µ* —É–∂–µ –ø—Ä–∏–æ—Ç–∫—Ä—ã—Ç–∞. –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!"
            ]
        
        return random.choice(messages)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
debt_service = DebtService()