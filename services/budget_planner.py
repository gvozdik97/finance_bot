# services/budget_planner.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from database.connection import db_connection

logger = logging.getLogger(__name__)

class BudgetPlanner:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    
    def check_existing_budget(self, user_id: int, category: str) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT amount FROM budgets 
                    WHERE user_id = ? AND category = ? AND period = 'monthly'
                ''', (user_id, category))
                
                result = cursor.fetchone()
                return result[0] if result else None
                
        except Exception as e:
            logger.error(f"Check existing budget error: {e}")
            return None
    
    def set_monthly_budget(self, user_id: int, category: str, amount: float) -> Dict:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—é–¥–∂–µ—Ç
            existing_budget = self.check_existing_budget(user_id, category)
            
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                if existing_budget is not None:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—é–¥–∂–µ—Ç
                    cursor.execute('''
                        UPDATE budgets 
                        SET amount = ?, created_at = CURRENT_TIMESTAMP
                        WHERE user_id = ? AND category = ? AND period = 'monthly'
                    ''', (amount, user_id, category))
                    
                    message = f"‚úÖ *–ë—é–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n" \
                             f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n" \
                             f"‚Ä¢ –°—Ç–∞—Ä—ã–π –ª–∏–º–∏—Ç: {existing_budget:,.0f} —Ä—É–±.\n" \
                             f"‚Ä¢ –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {amount:,.0f} —Ä—É–±.\n\n" \
                             f"üí° –ë—é–¥–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω!"
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç
                    cursor.execute('''
                        INSERT INTO budgets (user_id, category, amount, period)
                        VALUES (?, ?, ?, 'monthly')
                    ''', (user_id, category, amount))
                    
                    message = f"‚úÖ *–ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*\n\n" \
                             f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n" \
                             f"‚Ä¢ –õ–∏–º–∏—Ç –≤ –º–µ—Å—è—Ü: {amount:,.0f} —Ä—É–±.\n\n" \
                             f"üí° –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏!"
                
                conn.commit()
                
                return {
                    'success': True,
                    'message': message,
                    'was_updated': existing_budget is not None
                }
                
        except Exception as e:
            logger.error(f"Budget set error: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—é–¥–∂–µ—Ç–∞'}
    
    def get_budget_progress(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º –±—é–¥–∂–µ—Ç–∞–º —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã
                cursor.execute('''
                    SELECT category, amount FROM budgets 
                    WHERE user_id = ? AND period = 'monthly'
                ''', (user_id,))
                budgets = cursor.fetchall()
                
                if not budgets:
                    return {
                        'success': True,
                        'has_budgets': False,
                        'message': "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
                    }
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                budget_progress = []
                total_budget = 0
                total_spent = 0
                
                for category, budget_amount in budgets:
                    # –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                    cursor.execute('''
                        SELECT COALESCE(SUM(amount), 0)
                        FROM transactions 
                        WHERE user_id = ? AND category = ? AND type = 'expense'
                        AND date >= date('now', 'start of month')
                    ''', (user_id, category))
                    
                    spent = cursor.fetchone()[0]
                    percentage = (spent / budget_amount * 100) if budget_amount > 0 else 0
                    remaining = max(0, budget_amount - spent)
                    
                    budget_progress.append({
                        'category': category,
                        'budget': budget_amount,
                        'spent': spent,
                        'remaining': remaining,
                        'percentage': percentage,
                        'status': self._get_budget_status(percentage)
                    })
                    
                    total_budget += budget_amount
                    total_spent += spent
                
                # –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                overall_percentage = (total_spent / total_budget * 100) if total_budget > 0 else 0
                
                return {
                    'success': True,
                    'has_budgets': True,
                    'budgets': budget_progress,
                    'total_budget': total_budget,
                    'total_spent': total_spent,
                    'overall_percentage': overall_percentage,
                    'alerts': self._check_budget_alerts(budget_progress)
                }
                
        except Exception as e:
            logger.error(f"Budget progress error: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±—é–¥–∂–µ—Ç–æ–≤'}
    
    def suggest_budgets(self, user_id: int) -> Dict:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±—é–¥–∂–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
                cursor.execute('''
                    SELECT category, AVG(monthly_total) as avg_monthly
                    FROM (
                        SELECT category, strftime('%Y-%m', date) as month, 
                               SUM(amount) as monthly_total
                        FROM transactions 
                        WHERE user_id = ? AND type = 'expense'
                        AND date >= date('now', '-3 months')
                        GROUP BY category, month
                    )
                    GROUP BY category
                ''', (user_id,))
                
                spending_patterns = cursor.fetchall()
                
                if not spending_patterns:
                    return {
                        'success': True,
                        'has_suggestions': False,
                        'message': "üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\nüí° –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                    }
                
                suggestions = []
                for category, avg_spending in spending_patterns:
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±—é–¥–∂–µ—Ç –Ω–∞ 10-20% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
                    suggested_budget = avg_spending * 1.15
                    suggestions.append({
                        'category': category,
                        'avg_spending': avg_spending,
                        'suggested_budget': suggested_budget,
                        'reasoning': f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: {avg_spending:,.0f} —Ä—É–±./–º–µ—Å"
                    })
                
                return {
                    'success': True,
                    'has_suggestions': True,
                    'suggestions': suggestions
                }
                
        except Exception as e:
            logger.error(f"Budget suggestions error: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'}
    
    def _get_budget_status(self, percentage: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        if percentage < 50:
            return "üü¢ –í –Ω–æ—Ä–º–µ"
        elif percentage < 80:
            return "üü° –í–Ω–∏–º–∞–Ω–∏–µ"
        elif percentage < 100:
            return "üü† –†–∏—Å–∫"
        else:
            return "üî¥ –ü—Ä–µ–≤—ã—à–µ–Ω"
    
    def _check_budget_alerts(self, budgets: List[Dict]) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—é–¥–∂–µ—Ç—ã –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        alerts = []
        
        for budget in budgets:
            if budget['percentage'] >= 80:
                alert_msg = f"‚ö†Ô∏è {budget['category']}: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {budget['percentage']:.0f}%"
                if budget['percentage'] >= 100:
                    alert_msg += f" (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ {budget['spent'] - budget['budget']:,.0f} —Ä—É–±.)"
                alerts.append(alert_msg)
        
        return alerts
    
    def delete_budget(self, user_id: int, category: str) -> Dict:
        """–£–¥–∞–ª—è–µ—Ç –±—é–¥–∂–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    DELETE FROM budgets 
                    WHERE user_id = ? AND category = ? AND period = 'monthly'
                ''', (user_id, category))
                
                conn.commit()
                deleted = cursor.rowcount > 0
                
                if deleted:
                    return {
                        'success': True,
                        'message': f"üóëÔ∏è –ë—é–¥–∂–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —É–¥–∞–ª–µ–Ω"
                    }
                else:
                    return {
                        'success': False,
                        'error': f"–ë—é–¥–∂–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    }
                    
        except Exception as e:
            logger.error(f"Budget delete error: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞'}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
budget_planner = BudgetPlanner()