# services/transaction_service.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import logging
from typing import Dict
from database.connection import db_connection
from services.wallet_service import wallet_service  # ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢

logger = logging.getLogger(__name__)

class TransactionService:
    """
    –ß–∏—Å—Ç—ã–π –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    –¢–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª–∞ 10%/90%, –Ω–∏–∫–∞–∫–æ–≥–æ –æ–±—â–µ–≥–æ —É—á–µ—Ç–∞.
    """
    
    def __init__(self):
        pass  # –£–±–∏—Ä–∞–µ–º self.conn, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π db_connection
    
    def add_income(self, user_id: int, amount: float, category: str, description: str = "", 
                   use_custom_settings: bool = True) -> Dict:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Ö–æ–¥ —Å –ì–ò–ë–ö–ò–ú —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        """
        try:
            # –ì–∏–±–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
            distribution = wallet_service.distribute_income_flexible(
                user_id, amount, use_custom_settings
            )
            
            if not distribution['success']:
                return distribution
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–µ (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
            self._save_transaction(user_id, 'income', amount, category, description)
            
            return {
                'success': True,
                'message': distribution['message'],
                'distribution': {
                    'gold_reserve': distribution['gold_reserve'],
                    'living_budget': distribution['living_budget'],
                    'savings_rate': distribution['savings_rate']
                }
            }
            
        except Exception as e:
            logger.error(f"Income error for user {user_id}: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞'}
    
    def add_expense(self, user_id: int, amount: float, category: str, description: str = "") -> Dict:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –¢–û–õ–¨–ö–û –∏–∑ –ë—é–¥–∂–µ—Ç–∞ –Ω–∞ –∂–∏–∑–Ω—å (90%)
        """
        try:
            # –í–ê–í–ò–õ–û–ù–°–ö–û–ï –ü–†–ê–í–ò–õ–û: —Ä–∞—Å—Ö–æ–¥—ã —Ç–æ–ª—å–∫–æ –∏–∑ 90%
            affordability = wallet_service.can_afford_expense(user_id, amount)
            
            if not affordability['can_afford']:
                return {
                    'success': False,
                    'error': f"üö´ *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –ë—é–¥–∂–µ—Ç–µ –Ω–∞ –∂–∏–∑–Ω—å!*\n\n"
                            f"üíº –î–æ—Å—Ç—É–ø–Ω–æ: {affordability['available']:,.0f} —Ä—É–±.\n"
                            f"üí∏ –ù—É–∂–Ω–æ: {affordability['needed']:,.0f} —Ä—É–±.\n"
                            f"üìâ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {affordability['shortfall']:,.0f} —Ä—É–±."
                }
            
            # –°–ø–∏—Å–∞–Ω–∏–µ –¢–û–õ–¨–ö–û –∏–∑ –ë—é–¥–∂–µ—Ç–∞ –Ω–∞ –∂–∏–∑–Ω—å
            wallet_service.update_wallet_balance(user_id, 'living_budget', -amount)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ
            self._save_transaction(user_id, 'expense', amount, category, description)
            
            new_balance = affordability['available'] - amount
            
            return {
                'success': True,
                'message': f"üí∏ *–†–∞—Å—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–∑ –ë—é–¥–∂–µ—Ç–∞ –Ω–∞ –∂–∏–∑–Ω—å!*\n\n"
                          f"‚Ä¢ –°—É–º–º–∞: {amount:,.0f} —Ä—É–±.\n"
                          f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                          f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {new_balance:,.0f} —Ä—É–±.",
                'new_balance': new_balance
            }
            
        except Exception as e:
            logger.error(f"Expense error for user {user_id}: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞'}
    
    def _save_transaction(self, user_id: int, transaction_type: str, amount: float, 
                         category: str, description: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        with db_connection.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO transactions (user_id, type, amount, category, description)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, transaction_type, amount, category, description))
            
            conn.commit()
    
    def get_transaction_history(self, user_id: int, limit: int = 10) -> list:
        """–ü—Ä–æ—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)"""
        with db_connection.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT type, amount, category, description, date 
                FROM transactions 
                WHERE user_id = ? 
                ORDER BY date DESC 
                LIMIT ?
            ''', (user_id, limit))
            
            transactions = cursor.fetchall()
            return transactions

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ß–ò–°–¢–û–ì–û —Å–µ—Ä–≤–∏—Å–∞
transaction_service = TransactionService()