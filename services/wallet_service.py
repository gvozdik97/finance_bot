# services/wallet_service.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import logging
from typing import Dict, List, Optional
from database.connection import db_connection
from database.models import Wallet

logger = logging.getLogger(__name__)

class WalletService:
    def __init__(self):
        self.wallet_types = ['gold_reserve', 'living_budget', 'debt_repayment']
    
    def init_user_wallets(self, user_id: int) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∏ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                for wallet_type in self.wallet_types:
                    cursor.execute('''
                        INSERT OR IGNORE INTO wallets (user_id, wallet_type, balance)
                        VALUES (?, ?, ?)
                    ''', (user_id, wallet_type, 0.0))
                
                conn.commit()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from .user_settings_service import user_settings_service
            user_settings_service.init_user_settings(user_id)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞ –í–∞–≤–∏–ª–æ–Ω–∞
            from .babylon_service import babylon_service
            babylon_service.init_user_rules(user_id)
            
            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def distribute_income(self, user_id: int, amount: float) -> Dict:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Ö–æ–¥ –ø–æ –ø—Ä–∞–≤–∏–ª—É 10%/90%"""
        try:
            gold_reserve = round(amount * 0.10, 2)
            living_budget = round(amount * 0.90, 2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–æ–≤
            self.update_wallet_balance(user_id, 'gold_reserve', gold_reserve)
            self.update_wallet_balance(user_id, 'living_budget', living_budget)
            
            return {
                'success': True,
                'gold_reserve': gold_reserve,
                'living_budget': living_budget,
                'total_income': amount,
                'message': f"üè¶ *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –í–∞–≤–∏–ª–æ–Ω–∞:*\n\n"
                          f"üí∞ *–ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å (10%):* {gold_reserve:,.0f} —Ä—É–±.\n"
                          f"üíº *–ë—é–¥–∂–µ—Ç –Ω–∞ –∂–∏–∑–Ω—å (90%):* {living_budget:,.0f} —Ä—É–±.\n"
                          f"üìä *–û–±—â–∏–π –¥–æ—Ö–æ–¥:* {amount:,.0f} —Ä—É–±."
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {'success': False, 'error': str(e)}
    
    def distribute_income_flexible(self, user_id: int, amount: float, use_custom_settings: bool = True) -> Dict:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            from .user_settings_service import user_settings_service
            
            if use_custom_settings:
                settings = user_settings_service.get_user_settings(user_id)
                if settings and settings.auto_savings:
                    savings_rate = settings.savings_rate
                else:
                    savings_rate = 0  # –ï—Å–ª–∏ –∞–≤—Ç–æ-–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã
            else:
                savings_rate = 10.0  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ 10%
            
            gold_reserve = round(amount * (savings_rate / 100), 2)
            living_budget = round(amount - gold_reserve, 2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–æ–≤
            self.update_wallet_balance(user_id, 'gold_reserve', gold_reserve)
            self.update_wallet_balance(user_id, 'living_budget', living_budget)
            
            return {
                'success': True,
                'gold_reserve': gold_reserve,
                'living_budget': living_budget,
                'savings_rate': savings_rate,
                'total_income': amount,
                'message': self._get_distribution_message(amount, gold_reserve, living_budget, savings_rate)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–∏–±–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {'success': False, 'error': str(e)}
    
    def update_wallet_balance(self, user_id: int, wallet_type: str, amount: float) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE wallets 
                    SET balance = balance + ?, created_at = CURRENT_TIMESTAMP
                    WHERE user_id = ? AND wallet_type = ?
                ''', (amount, user_id, wallet_type))
                
                conn.commit()
                return cursor.rowcount > 0
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return False
    
    def get_wallet_balance(self, user_id: int, wallet_type: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT balance FROM wallets 
                    WHERE user_id = ? AND wallet_type = ?
                ''', (user_id, wallet_type))
                
                result = cursor.fetchone()
                return result[0] if result else 0.0
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return 0.0
    
    def get_all_wallets(self, user_id: int) -> Dict[str, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with db_connection.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT wallet_type, balance FROM wallets 
                    WHERE user_id = ?
                ''', (user_id,))
                
                wallets = {row[0]: row[1] for row in cursor.fetchall()}
                
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã –∫–æ—à–µ–ª—å–∫–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                for wallet_type in self.wallet_types:
                    if wallet_type not in wallets:
                        wallets[wallet_type] = 0.0
                
                return wallets
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {e}")
            return {wallet_type: 0.0 for wallet_type in self.wallet_types}
    
    def get_wallet_display_name(self, wallet_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
        names = {
            'gold_reserve': 'üí∞ –ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å (10%)',
            'living_budget': 'üíº –ë—é–¥–∂–µ—Ç –Ω–∞ –∂–∏–∑–Ω—å (90%)',
            'debt_repayment': 'üèõÔ∏è –§–æ–Ω–¥ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤'
        }
        return names.get(wallet_type, wallet_type)
    
    def can_afford_expense(self, user_id: int, amount: float) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±—é–¥–∂–µ—Ç–µ –Ω–∞ –∂–∏–∑–Ω—å –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞"""
        living_budget = self.get_wallet_balance(user_id, 'living_budget')
        
        return {
            'can_afford': living_budget >= amount,
            'available': living_budget,
            'needed': amount,
            'shortfall': max(0, amount - living_budget)
        }
    
    def _get_distribution_message(self, amount: float, gold_reserve: float, 
                                living_budget: float, savings_rate: float) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
        if savings_rate > 0:
            return (f"üè¶ *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ ({savings_rate}%)*\n\n"
                    f"üí∞ *–ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å ({savings_rate}%):* {gold_reserve:,.0f} —Ä—É–±.\n"
                    f"üíº *–ë—é–¥–∂–µ—Ç –Ω–∞ –∂–∏–∑–Ω—å ({100-savings_rate}%):* {living_budget:,.0f} —Ä—É–±.\n"
                    f"üìä *–û–±—â–∏–π –¥–æ—Ö–æ–¥:* {amount:,.0f} —Ä—É–±.")
        else:
            return (f"üè¶ *–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—é–¥–∂–µ—Ç*\n\n"
                    f"üíº *–ë—é–¥–∂–µ—Ç –Ω–∞ –∂–∏–∑–Ω—å:* {amount:,.0f} —Ä—É–±.\n"
                    f"üí° *–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã*")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
wallet_service = WalletService()