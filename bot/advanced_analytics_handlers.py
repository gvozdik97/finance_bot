# bot/advanced_analytics_handlers.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import logging
from telegram import Update
from telegram.ext import ContextTypes

from services.trend_analyzer import trend_analyzer
from utils.babylon_visualizers import babylon_visualizer
from keyboards.analytics_menu import get_advanced_analytics_menu_keyboard, get_visualizations_menu_keyboard

logger = logging.getLogger(__name__)

async def show_wealth_temple(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö—Ä–∞–º –±–æ–≥–∞—Ç—Å—Ç–≤–∞"""
    user_id = update.message.from_user.id
    
    try:
        temple = babylon_visualizer.create_wealth_temple(user_id)
        # –£–ë–ò–†–ê–ï–ú parse_mode –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏
        await update.message.reply_text(temple)  # –ë–µ–∑ parse_mode='Markdown'
        
    except Exception as e:
        logger.error(f"Temple visualization error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö—Ä–∞–º–∞")

async def show_financial_pyramid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∏—Ä–∞–º–∏–¥—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
    user_id = update.message.from_user.id
    
    try:
        pyramid = babylon_visualizer.create_financial_pyramid(user_id)
        # –£–ë–ò–†–ê–ï–ú parse_mode –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏
        await update.message.reply_text(pyramid)  # –ë–µ–∑ parse_mode='Markdown'
        
    except Exception as e:
        logger.error(f"Pyramid visualization error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ä–∞–º–∏–¥—ã")

async def show_river_of_fortune(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É–¥–∞—á–∏"""
    user_id = update.message.from_user.id
    
    try:
        river = babylon_visualizer.create_river_of_fortune(user_id)
        # –£–ë–ò–†–ê–ï–ú parse_mode
        await update.message.reply_text(river)  # –ë–µ–∑ parse_mode='Markdown'
        
    except Exception as e:
        logger.error(f"River visualization error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–µ–∫")

async def show_zodiac_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø"""
    user_id = update.message.from_user.id
    
    try:
        zodiac = babylon_visualizer.create_zodiac_financial_chart(user_id)
        # –£–ë–ò–†–ê–ï–ú parse_mode
        await update.message.reply_text(zodiac)  # –ë–µ–∑ parse_mode='Markdown'
        
    except Exception as e:
        logger.error(f"Zodiac visualization error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞")

async def show_monthly_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"""
    user_id = update.message.from_user.id
    
    try:
        report = babylon_visualizer.create_monthly_report(user_id)
        # –£–ë–ò–†–ê–ï–ú parse_mode
        await update.message.reply_text(report)  # –ë–µ–∑ parse_mode='Markdown'
        
    except Exception as e:
        logger.error(f"Monthly report error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å parse_mode, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∏—Ö –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
async def show_income_trends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–æ—Ö–æ–¥–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        trends = trend_analyzer.analyze_income_trends(user_id)
        
        if not trends['has_data']:
            await update.message.reply_text(
                trends['message'],
                reply_markup=get_advanced_analytics_menu_keyboard()
            )
            return
        
        trends_text = "*–ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í –î–û–•–û–î–û–í*\n\n"
        
        trends_text += f"*–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞:* {trends['trend_direction'].capitalize()}\n"
        trends_text += f"*–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:* {trends['volatility']:.1f}%\n"
        trends_text += f"*–¢–µ–º–ø —Ä–æ—Å—Ç–∞:* {trends['growth_rate']:.1f}%\n"
        trends_text += f"*–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥:* {trends['average_income']:,.0f} —Ä—É–±./–º–µ—Å.\n"
        trends_text += f"*–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:* {trends['latest_income']:,.0f} —Ä—É–±.\n\n"
        
        trends_text += "*–ü–†–û–ì–ù–û–ó –ù–ê 3 –ú–ï–°–Ø–¶–ê:*\n"
        trends_text += f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {trends['forecast']['next_3_months']:,.0f} —Ä—É–±.\n"
        trends_text += f"‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑: {trends['forecast']['outlook']}\n"
        trends_text += f"‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {trends['forecast']['confidence']}\n\n"
        
        if trends['trend_direction'] == "—Ä–∞—Å—Ç—É—â–∏–π":
            trends_text += "üéâ *–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!* –í–∞—à–∏ –¥–æ—Ö–æ–¥—ã —Ä–∞—Å—Ç—É—Ç!"
        elif trends['trend_direction'] == "–ø–∞–¥–∞—é—â–∏–π":
            trends_text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤"
        else:
            trends_text += "‚úÖ *–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å* - —Ö–æ—Ä–æ—à–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
        
        # –≠–¢–û–¢ –¢–ï–ö–°–¢ –ë–ï–ó–û–ü–ê–°–ï–ù –î–õ–Ø MARKDOWN
        await update.message.reply_text(trends_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Income trends error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–æ—Ö–æ–¥–æ–≤")

async def show_expense_patterns(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        patterns = trend_analyzer.analyze_expense_patterns(user_id)
        
        if not patterns['has_data']:
            await update.message.reply_text(
                patterns['message'],
                reply_markup=get_advanced_analytics_menu_keyboard()
            )
            return
        
        patterns_text = "*–ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –†–ê–°–•–û–î–û–í*\n\n"
        
        patterns_text += f"*–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:* {patterns['total_categories']}\n"
        patterns_text += f"*–°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:* {patterns['average_monthly_expense']:,.0f} —Ä—É–±./–º–µ—Å.\n\n"
        
        patterns_text += "*–û–°–ù–û–í–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:*\n"
        for i, pattern in enumerate(patterns['spending_patterns'][:5], 1):
            patterns_text += f"{i}. *{pattern['category']}*\n"
            patterns_text += f"   –¢—Ä–µ–Ω–¥: {pattern['trend']}\n"
            patterns_text += f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {pattern['volatility']:.1f}%\n"
            patterns_text += f"   –í —Å—Ä–µ–¥–Ω–µ–º: {pattern['average_amount']:,.0f} —Ä—É–±.\n\n"
        
        patterns_text += "*–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:*\n"
        for recommendation in patterns['recommendations']:
            patterns_text += f"‚Ä¢ {recommendation}\n"
        
        # –≠–¢–û–¢ –¢–ï–ö–°–¢ –ë–ï–ó–û–ü–ê–°–ï–ù –î–õ–Ø MARKDOWN
        await update.message.reply_text(patterns_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Expense patterns error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤")

async def show_visualizations_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
    menu_text = """
*–í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò –í–ê–í–ò–õ–û–ù–ê*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:

üèîÔ∏è –ü–∏—Ä–∞–º–∏–¥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
üèõÔ∏è –•—Ä–∞–º –≤–∞—à–µ–≥–æ –±–æ–≥–∞—Ç—Å—Ç–≤–∞  
üåä –†–µ–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É–¥–∞—á–∏
‚ú® –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
üìú –ú–µ—Å—è—á–Ω–∞—è –ª–µ—Ç–æ–ø–∏—Å—å

*–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–ö–∞—Ä—Ç–∏–Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–∞ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –∏–∑ –º–Ω–æ–≥–∏—Ö –¥–µ—Ç–∞–ª–µ–π¬ª
"""
    
    await update.message.reply_text(
        menu_text, 
        parse_mode='Markdown',
        reply_markup=get_visualizations_menu_keyboard()
    )