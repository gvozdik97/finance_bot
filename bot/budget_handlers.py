# bot/budget_handlers.py - –û–ë–ù–û–í–õ–Ø–ï–ú –° –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï–ú –î–£–ë–õ–ò–ö–ê–¢–û–í
import logging
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CommandHandler, filters

from services.budget_planner import budget_planner
from services.simple_budget_service import simple_budget_service
from keyboards.budget_menu import get_budget_management_keyboard, get_budget_categories_keyboard, get_budget_confirmation_keyboard
from keyboards.main_menu import get_main_menu_keyboard, remove_keyboard
from .common import show_main_menu

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞
BUDGET_CATEGORY, BUDGET_AMOUNT, BUDGET_CONFIRMATION = range(10, 13)

async def show_budgets_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞–º–∏"""
    menu_text = """
üí∞ *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–Æ–î–ñ–ï–¢–ê–ú–ò*

–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã:

‚Ä¢ üí∞ –ú–æ–∏ –±—é–¥–∂–µ—Ç—ã - —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
‚Ä¢ üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - —É–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

üí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–ú—É–¥—Ä—ã–π —á–µ–ª–æ–≤–µ–∫ –∑–Ω–∞–µ—Ç –º–µ—Ä—É –≤ —Ä–∞—Å—Ö–æ–¥–∞—Ö¬ª
"""
    await update.message.reply_text(
        menu_text,
        parse_mode='Markdown',
        reply_markup=get_budget_management_keyboard()
    )

async def show_my_budgets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    user_id = update.message.from_user.id
    
    try:
        progress = budget_planner.get_budget_progress(user_id)
        
        if not progress['success']:
            await update.message.reply_text(
                f"‚ùå {progress['error']}",
                reply_markup=get_budget_management_keyboard()
            )
            return
        
        if not progress['has_budgets']:
            await update.message.reply_text(
                progress['message'],
                parse_mode='Markdown',
                reply_markup=get_budget_management_keyboard()
            )
            return
        
        budgets_text = "üí∞ *–í–ê–®–ò –ë–Æ–î–ñ–ï–¢–´*\n\n"
        
        for budget in progress['budgets']:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            bar_length = int(budget['percentage'] / 10)
            bar = '‚ñà' * bar_length + '‚ñë' * (10 - bar_length)
            
            budgets_text += f"**{budget['category']}** {budget['status']}\n"
            budgets_text += f"–õ–∏–º–∏—Ç: {budget['budget']:,.0f} —Ä—É–±.\n"
            budgets_text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {budget['spent']:,.0f} —Ä—É–±. ({budget['percentage']:.1f}%)\n"
            budgets_text += f"–û—Å—Ç–∞–ª–æ—Å—å: {budget['remaining']:,.0f} —Ä—É–±.\n"
            budgets_text += f"{bar}\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        budgets_text += f"üìä *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
        budgets_text += f"–í—Å–µ–≥–æ –±—é–¥–∂–µ—Ç–æ–≤: {len(progress['budgets'])}\n"
        budgets_text += f"–û–±—â–∏–π –ª–∏–º–∏—Ç: {progress['total_budget']:,.0f} —Ä—É–±.\n"
        budgets_text += f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {progress['total_spent']:,.0f} —Ä—É–±.\n"
        budgets_text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {progress['overall_percentage']:.1f}%\n\n"
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if progress['alerts']:
            budgets_text += "‚ö†Ô∏è *–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:*\n"
            for alert in progress['alerts']:
                budgets_text += f"‚Ä¢ {alert}\n"
        
        await update.message.reply_text(
            budgets_text,
            parse_mode='Markdown',
            reply_markup=get_budget_management_keyboard()
        )
        
    except Exception as e:
        logger.error(f"My budgets error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–æ–≤",
            reply_markup=get_budget_management_keyboard()
        )

async def start_set_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞"""
    await update.message.reply_text(
        "üéØ *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞:",
        parse_mode='Markdown',
        reply_markup=get_budget_categories_keyboard()
    )
    return BUDGET_CATEGORY

async def handle_budget_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—é–¥–∂–µ—Ç–∞"""
    category = update.message.text.strip()
    
    if category == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await show_main_menu(update, context)
        return ConversationHandler.END
    
    context.user_data['budget_category'] = category
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—é–¥–∂–µ—Ç
    user_id = update.message.from_user.id
    existing_budget = budget_planner.check_existing_budget(user_id, category)
    
    if existing_budget is not None:
        context.user_data['existing_budget'] = existing_budget
        await update.message.reply_text(
            f"‚ö†Ô∏è *–ë—é–¥–∂–µ—Ç —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{category}**\n"
            f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {existing_budget:,.0f} —Ä—É–±.\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –±—é–¥–∂–µ—Ç?",
            parse_mode='Markdown',
            reply_markup=get_budget_confirmation_keyboard()
        )
        return BUDGET_CONFIRMATION
    else:
        await update.message.reply_text(
            f"üìä *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è: {category}*\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –≤ —Ä—É–±–ª—è—Ö:\n\n"
            f"–ü—Ä–∏–º–µ—Ä: `5000` –∏–ª–∏ `15000`",
            parse_mode='Markdown',
            reply_markup=remove_keyboard()
        )
        return BUDGET_AMOUNT

async def handle_budget_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –±—é–¥–∂–µ—Ç–∞"""
    response = update.message.text.strip()
    
    if response == '‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å':
        await update.message.reply_text(
            f"üìä *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è: {context.user_data['budget_category']}*\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –≤ —Ä—É–±–ª—è—Ö:\n\n"
            f"–ü—Ä–∏–º–µ—Ä: `5000` –∏–ª–∏ `15000`",
            parse_mode='Markdown',
            reply_markup=remove_keyboard()
        )
        return BUDGET_AMOUNT
    elif response in ['‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']:
        await update.message.reply_text(
            "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_budget_management_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_budget_confirmation_keyboard()
        )
        return BUDGET_CONFIRMATION

async def handle_budget_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –±—é–¥–∂–µ—Ç–∞"""
    try:
        amount = float(update.message.text.replace(',', '.'))
        
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return BUDGET_AMOUNT
        
        user_id = update.message.from_user.id
        category = context.user_data['budget_category']
        
        result = budget_planner.set_monthly_budget(user_id, category, amount)
        
        if result['success']:
            await update.message.reply_text(
                result['message'],
                parse_mode='Markdown',
                reply_markup=get_budget_management_keyboard()
            )
        else:
            await update.message.reply_text(
                f"‚ùå {result['error']}",
                reply_markup=get_budget_management_keyboard()
            )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: `5000`")
        return BUDGET_AMOUNT

async def show_budget_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±—é–¥–∂–µ—Ç–∞–º"""
    user_id = update.message.from_user.id
    
    try:
        suggestions = budget_planner.suggest_budgets(user_id)
        
        if not suggestions['success']:
            await update.message.reply_text(
                f"‚ùå {suggestions['error']}",
                reply_markup=get_budget_management_keyboard()
            )
            return
        
        if not suggestions['has_suggestions']:
            await update.message.reply_text(
                suggestions['message'],
                parse_mode='Markdown',
                reply_markup=get_budget_management_keyboard()
            )
            return
        
        recommendations_text = "üí° *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–Æ–î–ñ–ï–¢–ê–ú*\n\n"
        recommendations_text += "–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n\n"
        
        for suggestion in suggestions['suggestions']:
            recommendations_text += f"**{suggestion['category']}**\n"
            recommendations_text += f"–°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {suggestion['avg_spending']:,.0f} —Ä—É–±./–º–µ—Å\n"
            recommendations_text += f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—é–¥–∂–µ—Ç: {suggestion['suggested_budget']:,.0f} —Ä—É–±./–º–µ—Å\n"
            recommendations_text += f"üìà {suggestion['reasoning']}\n\n"
        
        recommendations_text += "üíé *–°–æ–≤–µ—Ç:* –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—é–¥–∂–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è!"
        
        await update.message.reply_text(
            recommendations_text,
            parse_mode='Markdown',
            reply_markup=get_budget_management_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Budget recommendations error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
            reply_markup=get_budget_management_keyboard()
        )

async def handle_budget_menu_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = update.message.text
    
    if text == 'üí∞ –ú–æ–∏ –±—é–¥–∂–µ—Ç—ã':
        await show_my_budgets(update, context)
    elif text == 'üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç':
        return await start_set_budget(update, context)
    elif text == 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        await show_budget_recommendations(update, context)
    elif text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await show_main_menu(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞",
            reply_markup=get_budget_management_keyboard()
        )

async def cancel_budget_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞"""
    await update.message.reply_text(
        "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_budget_management_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

def create_budget_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞"""
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç$'), start_set_budget)
        ],
        states={
            BUDGET_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget_category)],
            BUDGET_CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget_confirmation)],
            BUDGET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget_amount)]
        },
        fallbacks=[CommandHandler('cancel', cancel_budget_conversation)],
        allow_reentry=True
    )