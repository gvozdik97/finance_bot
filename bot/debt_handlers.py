# bot/debt_handlers.py - –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –í–°–ï–• –§–£–ù–ö–¶–ò–ô

import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CommandHandler, filters

from services.debt_service import debt_service
from services.wallet_service import wallet_service
from keyboards.main_menu import get_main_menu_keyboard, remove_keyboard
from keyboards.debt_menu import get_debt_management_keyboard, get_debt_selection_keyboard
from .common import show_main_menu

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞
SELECT_DEBT, ENTER_PAYMENT_AMOUNT = range(2)

# ============================================================================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
# ============================================================================

async def show_debts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        debts = debt_service.get_active_debts(user_id)
        
        if not debts:
            await update.message.reply_text(
                "üéâ *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤!*\n\n"
                "üí° *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç –¥–æ–ª–≥–æ–≤ —á–µ–ª–æ–≤–µ–∫ ‚Äî —É–∂–µ –±–æ–≥–∞—á!¬ª",
                parse_mode='Markdown',
                reply_markup=get_debt_management_keyboard()
            )
            return
        
        debts_text = "üìú *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏:*\n\n"
        total_debt = 0
        
        for i, debt in enumerate(debts, 1):
            interest_info = f" ({debt.interest_rate}%)" if debt.interest_rate > 0 else ""
            due_info = f" –¥–æ {debt.due_date.strftime('%d.%m.%Y')}" if debt.due_date else ""
            debts_text += f"{i}. *{debt.creditor}*: {debt.current_amount:,.0f} —Ä—É–±.{interest_info}{due_info}\n"
            total_debt += debt.current_amount
        
        debts_text += f"\nüí∞ *–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤:* {total_debt:,.0f} —Ä—É–±."
        debts_text += f"\nüìã *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–≥–æ–≤:* {len(debts)}"
        
        await update.message.reply_text(
            debts_text, 
            parse_mode='Markdown',
            reply_markup=get_debt_management_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Debts menu error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–≥–æ–≤.")

async def show_snowball_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –ø–æ–≥–∞—à–µ–Ω–∏—è –ø–æ –º–µ—Ç–æ–¥—É —Å–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–º–∞"""
    user_id = update.message.from_user.id
    
    try:
        plan = debt_service.calculate_snowball_plan(user_id)
        
        if not plan['has_debts']:
            await update.message.reply_text(
                plan['message'], 
                parse_mode='Markdown',
                reply_markup=get_debt_management_keyboard()
            )
            return
        
        plan_text = "üìã *–ü–ª–∞–Ω –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤ (–ú–µ—Ç–æ–¥ —Å–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–º–∞)*\n\n"
        plan_text += f"üí∞ *–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤:* {plan['total_debt']:,.0f} —Ä—É–±.\n\n"
        
        plan_text += "üéØ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*\n"
        for item in plan['plan']:
            plan_text += f"ü•á *{item['priority']}. {item['creditor']}*\n"
            plan_text += f"   üí∞ –°—É–º–º–∞: {item['amount']:,.0f} —Ä—É–±.\n"
            plan_text += f"   üí≥ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–ª–∞—Ç–µ–∂: {item['recommended_payment']:,.0f} —Ä—É–±.\n\n"
        
        plan_text += "üí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∞–ª—ã—Ö –¥–æ–ª–≥–æ–≤ ‚Äî –∫–∞–∂–¥–∞—è –ø–æ–±–µ–¥–∞ –ø—Ä–∏–¥–∞–µ—Ç —Å–∏–ª –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—Ä–∞–∂–µ–Ω–∏–π!¬ª"
        
        await update.message.reply_text(
            plan_text, 
            parse_mode='Markdown',
            reply_markup=get_debt_management_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Snowball plan error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–ª–∞–Ω–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è.")

async def show_debt_freedom_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ—Ç –¥–æ–ª–≥–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        debts = debt_service.get_active_debts(user_id)
        total_debt = sum(debt.current_amount for debt in debts)
        
        if total_debt == 0:
            progress_text = "üéä *üèõÔ∏è –î–í–ï–†–¨ –í –í–ê–í–ò–õ–û–ù–°–ö–ò–ô –•–†–ê–ú –û–¢–ö–†–´–¢–ê!* üéä\n\n"
            progress_text += "üíé *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* \n"
            progress_text += "¬´–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç –¥–æ–ª–≥–æ–≤ —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥–æ–±–µ–Ω —Ü–∞—Ä—é! \n"
            progress_text += "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –≤–∞—Å, \n"
            progress_text += "–∞ –Ω–µ –≤—ã –Ω–∞ —Å–≤–æ–∏ –¥–æ–ª–≥–∏.¬ª"
        else:
            initial_debt = sum(debt.initial_amount for debt in debts)
            progress = ((initial_debt - total_debt) / initial_debt * 100) if initial_debt > 0 else 0
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            filled = '‚ñà' * int(progress / 10)
            empty = '‚ñë' * (10 - int(progress / 10))
            progress_bar = f"{filled}{empty}"
            
            progress_text = f"üìà *–ü–£–¢–¨ –ö –°–í–û–ë–û–î–ï –û–¢ –î–û–õ–ì–û–í*\n\n"
            progress_text += f"üèõÔ∏è *–ü—Ä–æ–≥—Ä–µ—Å—Å:* {progress:.1f}%\n"
            progress_text += f"{progress_bar}\n\n"
            progress_text += f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {initial_debt:,.0f} —Ä—É–±.\n"
            progress_text += f"üéØ –¢–µ–∫—É—â–∏–π –¥–æ–ª–≥: {total_debt:,.0f} —Ä—É–±.\n"
            progress_text += f"‚úÖ –ü–æ–≥–∞—à–µ–Ω–æ: {initial_debt - total_debt:,.0f} —Ä—É–±.\n\n"
            progress_text += "üí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–ö–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ!¬ª"
        
        await update.message.reply_text(
            progress_text, 
            parse_mode='Markdown',
            reply_markup=get_debt_management_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Debt progress error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")

async def show_debt_milestones(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ö–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ—Ç –¥–æ–ª–≥–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        debts = debt_service.get_active_debts(user_id)
        total_debt = sum(debt.current_amount for debt in debts)
        initial_debt = sum(debt.initial_amount for debt in debts)
        
        if total_debt == 0:
            milestones_text = "üèÜ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ–ª–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã!*"
        else:
            progress = ((initial_debt - total_debt) / initial_debt * 100) if initial_debt > 0 else 0
            
            milestones_text = "üéØ *–í–µ—Ö–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ—Ç –¥–æ–ª–≥–æ–≤*\n\n"
            
            milestones = [
                (25, "ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å", "–ü–µ—Ä–≤—ã–π —Å–µ—Ä—å–µ–∑–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!"),
                (50, "ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "–ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞!"),
                (75, "ü•á –ó–æ–ª–æ—Ç–æ–π —É—Ä–æ–≤–µ–Ω—å", "–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!"),
                (100, "üèÜ –ü–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞", "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã!")
            ]
            
            for threshold, title, description in milestones:
                if progress >= threshold:
                    status = "‚úÖ –î–û–°–¢–ò–ì–ù–£–¢–û"
                else:
                    status = "‚è≥ –í –ü–†–û–¶–ï–°–°–ï"
                
                milestones_text += f"{title} - {status}\n"
                milestones_text += f"   {description}\n\n"
            
            milestones_text += f"üìä *–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:* {progress:.1f}%"
        
        await update.message.reply_text(
            milestones_text, 
            parse_mode='Markdown',
            reply_markup=get_debt_management_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Debt milestones error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ö.")

async def show_debt_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–ª–≥–∞–º"""
    user_id = update.message.from_user.id
    
    try:
        stats = debt_service.get_debt_statistics(user_id)
        
        stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–≥–æ–≤*\n\n"
        
        if stats['total_debt'] == 0:
            stats_text += "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤!*\n\n"
            stats_text += "üí° *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç –¥–æ–ª–≥–æ–≤ —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥–æ–±–µ–Ω —Ü–∞—Ä—é!¬ª"
        else:
            stats_text += f"üí∞ *–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤:* {stats['total_debt']:,.0f} —Ä—É–±.\n"
            stats_text += f"üìã *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–≥–æ–≤:* {stats['debt_count']}\n"
            stats_text += f"üíº *–ë–∞–ª–∞–Ω—Å –±—é–¥–∂–µ—Ç–∞:* {stats['budget_balance']:,.0f} —Ä—É–±.\n"
            stats_text += f"‚öñÔ∏è *–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ–ª–≥/–±—é–¥–∂–µ—Ç:* {stats['debt_to_budget_ratio']:.1f}%\n"
            stats_text += f"üìà *–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:* {stats['risk_level']}\n"
            stats_text += f"‚è±Ô∏è *–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–≥–∞—à–µ–Ω–∏—è:* {stats['estimated_payoff_time']}\n\n"
            stats_text += f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* {stats['recommendation']}"
        
        await update.message.reply_text(
            stats_text, 
            parse_mode='Markdown',
            reply_markup=get_debt_management_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Debt statistics error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–ª–≥–æ–≤.")

# ============================================================================
# –î–ò–ê–õ–û–ì –ü–û–ì–ê–®–ï–ù–ò–Ø –î–û–õ–ì–ê
# ============================================================================

async def start_payment_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    user_id = update.message.from_user.id
    debts = debt_service.get_active_debts(user_id)
    
    if not debts:
        await update.message.reply_text(
            "üéâ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è!",
            reply_markup=get_debt_management_keyboard()
        )
        return ConversationHandler.END
    
    budget_balance = wallet_service.get_wallet_balance(user_id, 'living_budget')
    
    if budget_balance <= 0:
        await update.message.reply_text(
            "üö´ *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤!*\n\n"
            f"üíº –ë–∞–ª–∞–Ω—Å –ë—é–¥–∂–µ—Ç–∞ –Ω–∞ –∂–∏–∑–Ω—å: {budget_balance:,.0f} —Ä—É–±.\n\n"
            f"üí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–æ–ª–Ω–∏ –∫–æ—à–µ–ª–µ–∫, –ø–æ—Ç–æ–º –ø–ª–∞—Ç–∏ –¥–æ–ª–≥–∏¬ª",
            parse_mode='Markdown',
            reply_markup=get_debt_management_keyboard()
        )
        return ConversationHandler.END
    
    debts_text = f"üí≥ *–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤*\n\n"
    debts_text += f"üíº *–î–æ—Å—Ç—É–ø–Ω–æ –≤ –±—é–¥–∂–µ—Ç–µ:* {budget_balance:,.0f} —Ä—É–±.\n\n"
    debts_text += "üìã *–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–≥ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è:*\n\n"
    
    for i, debt in enumerate(debts, 1):
        urgency = ""
        if debt.due_date and debt.due_date < datetime.now() + timedelta(days=30):
            urgency = " üî•"
        debts_text += f"{i}. {debt.creditor} - {debt.current_amount:,.0f} —Ä—É–±.{urgency}\n"
    
    context.user_data['debts_list'] = debts
    context.user_data['available_budget'] = budget_balance
    
    await update.message.reply_text(
        debts_text, 
        parse_mode='Markdown',
        reply_markup=get_debt_selection_keyboard(debts)
    )
    return SELECT_DEBT

async def handle_debt_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–ª–≥–∞ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    try:
        if update.message.text == 'üîô –ù–∞–∑–∞–¥ –∫ –¥–æ–ª–≥–∞–º':
            await show_debts_main_menu(update, context)
            context.user_data.clear()
            return ConversationHandler.END
        
        debt_number = int(update.message.text.split('.')[0])
        debts = context.user_data['debts_list']
        
        if debt_number < 1 or debt_number > len(debts):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return SELECT_DEBT
        
        selected_debt = debts[debt_number - 1]
        context.user_data['selected_debt'] = selected_debt
        context.user_data['selected_debt_id'] = selected_debt.id
        
        available_budget = context.user_data['available_budget']
        
        await update.message.reply_text(
            f"üèõÔ∏è *–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞: {selected_debt.creditor}*\n\n"
            f"üíº –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {selected_debt.current_amount:,.0f} —Ä—É–±.\n"
            f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è: {available_budget:,.0f} —Ä—É–±.\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:",
            parse_mode='Markdown',
            reply_markup=remove_keyboard()
        )
        return ENTER_PAYMENT_AMOUNT
        
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞:")
        return SELECT_DEBT

async def handle_payment_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_amount = float(update.message.text.replace(',', '.'))
        selected_debt = context.user_data['selected_debt']
        available_budget = context.user_data['available_budget']
        user_id = update.message.from_user.id
        
        if payment_amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return ENTER_PAYMENT_AMOUNT
        
        if payment_amount > available_budget:
            await update.message.reply_text(
                f"üö´ *–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—é–¥–∂–µ—Ç!*\n\n"
                f"üíº –î–æ—Å—Ç—É–ø–Ω–æ: {available_budget:,.0f} —Ä—É–±.\n"
                f"üí∏ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {payment_amount:,.0f} —Ä—É–±.\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É:",
                parse_mode='Markdown'
            )
            return ENTER_PAYMENT_AMOUNT
        
        if payment_amount > selected_debt.current_amount:
            await update.message.reply_text(
                f"üí° *–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞!*\n\n"
                f"üìã –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {selected_debt.current_amount:,.0f} —Ä—É–±.\n"
                f"üí≥ –ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: {selected_debt.current_amount:,.0f} —Ä—É–±.\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)",
                parse_mode='Markdown'
            )
            context.user_data['suggested_full_payment'] = True
            return ENTER_PAYMENT_AMOUNT
        
        result = debt_service.make_payment(user_id, selected_debt.id, payment_amount)
        
        if result['success']:
            await update.message.reply_text(result['message'], parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå {result['error']}")
        
        await show_debts_main_menu(update, context)
        context.user_data.clear()
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: `5000`")
        return ENTER_PAYMENT_AMOUNT

async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    response = update.message.text.lower()
    user_id = update.message.from_user.id
    
    if response in ['–¥–∞', 'yes', '–æ–∫', '—Ö–æ—Ä–æ—à–æ']:
        selected_debt = context.user_data['selected_debt']
        payment_amount = selected_debt.current_amount
        
        result = debt_service.make_payment(user_id, selected_debt.id, payment_amount)
        
        if result['success']:
            await update.message.reply_text(result['message'], parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå {result['error']}")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–æ–≤–æ:")
        return ENTER_PAYMENT_AMOUNT
    
    await show_debts_main_menu(update, context)
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_debt_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    await update.message.reply_text(
        "‚ùå –ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_debt_management_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

async def show_debts_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞–º–∏"""
    user_id = update.message.from_user.id
    debts = debt_service.get_active_debts(user_id)
    
    menu_text = "üèõÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–æ–ª–≥–∞–º–∏*\n\n"
    
    if not debts:
        menu_text += "üéâ *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤!*\n\n"
        menu_text += "üí° *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç –¥–æ–ª–≥–æ–≤ —á–µ–ª–æ–≤–µ–∫ ‚Äî —É–∂–µ –±–æ–≥–∞—á!¬ª"
    else:
        total_debt = sum(debt.current_amount for debt in debts)
        menu_text += f"üìä *–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤:* {total_debt:,.0f} —Ä—É–±.\n"
        menu_text += f"üìã *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–≥–æ–≤:* {len(debts)}\n\n"
        menu_text += "üí° *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:*"
    
    await update.message.reply_text(
        menu_text, 
        parse_mode='Markdown',
        reply_markup=get_debt_management_keyboard()
    )

def create_debt_payment_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^üí≥ –ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥$'), start_payment_flow)
        ],
        states={
            SELECT_DEBT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_debt_selection)],
            ENTER_PAYMENT_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_payment_amount),
                MessageHandler(filters.Regex(r'^(–¥–∞|yes|–Ω–µ—Ç|no)$'), handle_payment_confirmation)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_debt_payment)],
        allow_reentry=True
    )