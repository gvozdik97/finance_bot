# bot/conversations.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import logging
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters

from utils.constants import AMOUNT, CATEGORY, DESCRIPTION
from utils.validators import validate_amount
from utils.categorizers import clean_category_name, categorize_expense, categorize_income

from services.transaction_service import transaction_service
from services.simple_budget_service import simple_budget_service
from services.babylon_service import babylon_service
from services.wallet_service import wallet_service  # ‚úÖ –î–û–ë–ê–í–ò–õ–ò –ò–ú–ü–û–†–¢

from keyboards.main_menu import get_main_menu_keyboard, get_category_keyboard, remove_keyboard

from .common import show_main_menu

logger = logging.getLogger(__name__)

# ============================================================================
# –ß–ò–°–¢–ê–Ø –í–ê–í–ò–õ–û–ù–°–ö–ê–Ø –õ–û–ì–ò–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
# ============================================================================

async def add_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–∏—Å—Ç–æ–µ –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞"""
    await update.message.reply_text(
        "üí≥ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞*\n\n"
        "üèõÔ∏è *–ü–æ –ø—Ä–∞–≤–∏–ª–∞–º –í–∞–≤–∏–ª–æ–Ω–∞:*\n"
        "‚Ä¢ 10% ‚Üí üí∞ –ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è)\n"  
        "‚Ä¢ 90% ‚Üí üíº –ë—é–¥–∂–µ—Ç –Ω–∞ –∂–∏–∑–Ω—å (—Ä–∞—Å—Ö–æ–¥—ã)\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:",
        parse_mode='Markdown', 
        reply_markup=remove_keyboard()
    )
    context.user_data['type'] = 'income'
    return AMOUNT

async def add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–∏—Å—Ç–æ–µ –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    user_id = update.message.from_user.id
    living_budget = wallet_service.get_wallet_balance(user_id, 'living_budget')  # ‚úÖ –ò–°–ü–†–ê–í–ò–õ–ò
    
    await update.message.reply_text(
        f"üí∏ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞*\n\n"
        f"üíº *–î–æ—Å—Ç—É–ø–Ω–æ –≤ –ë—é–¥–∂–µ—Ç–µ –Ω–∞ –∂–∏–∑–Ω—å:* {living_budget:,.0f} —Ä—É–±.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
        parse_mode='Markdown',
        reply_markup=remove_keyboard()
    )
    context.user_data['type'] = 'expense'
    return AMOUNT

async def amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã —Å —á–∏—Å—Ç–æ–π –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–π –ª–æ–≥–∏–∫–æ–π - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    is_valid, result = validate_amount(update.message.text)
    
    if not is_valid:
        await update.message.reply_text(result)
        return AMOUNT
    
    amount = result
    user_id = update.message.from_user.id
    context.user_data['amount'] = amount
    
    # –í–ê–í–ò–õ–û–ù–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ä–∞—Å—Ö–æ–¥—ã —Ç–æ–ª—å–∫–æ –∏–∑ 90%
    if context.user_data['type'] == 'expense':
        affordability = wallet_service.can_afford_expense(user_id, amount)  # ‚úÖ –ò–°–ü–†–ê–í–ò–õ–ò
        
        if not affordability['can_afford']:
            await update.message.reply_text(
                f"üö´ *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –ë—é–¥–∂–µ—Ç–µ –Ω–∞ –∂–∏–∑–Ω—å!*\n\n"
                f"üíº –î–æ—Å—Ç—É–ø–Ω–æ: {affordability['available']:,.0f} —Ä—É–±.\n"
                f"üí∏ –ù—É–∂–Ω–æ: {affordability['needed']:,.0f} —Ä—É–±.\n"
                f"üìâ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {affordability['shortfall']:,.0f} —Ä—É–±.\n\n"
                f"üí° *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* \"–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π —Ä–∞—Å—Ö–æ–¥—ã –≤ —Ä–∞–º–∫–∞—Ö 90%\"",
                parse_mode='Markdown'
            )
            await show_main_menu(update, context)
            context.user_data.clear()
            return ConversationHandler.END
    
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    transaction_type = context.user_data['type']
    type_text = "—Ä–∞—Å—Ö–æ–¥–∞" if transaction_type == 'expense' else "–¥–æ—Ö–æ–¥–∞"
    
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {type_text}:",
        reply_markup=get_category_keyboard(transaction_type)
    )
    return CATEGORY

async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = clean_category_name(update.message.text)
    context.user_data['category'] = category
    
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=remove_keyboard()
    )
    return DESCRIPTION

async def skip_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è"""
    return await save_transaction(update, context, description="–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")

async def save_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE, description: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —á–∏—Å—Ç–æ–π –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–π –ª–æ–≥–∏–∫–æ–π"""
    user_data = context.user_data
    
    if description is None:
        description = update.message.text if update.message and update.message.text != '/skip' else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
    
    user_id = update.message.from_user.id
    amount = user_data['amount']
    category = user_data['category']
    transaction_type = user_data['type']
    
    try:
        if transaction_type == 'income':
            # –ß–ò–°–¢–û–ï –í–ê–í–ò–õ–û–ù–°–ö–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï
            result = transaction_service.add_income(user_id, amount, category, description)
            
            if result['success']:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∞–≤–∏–ª–∞ 10%
                babylon_service.update_rule_progress(user_id, '10_percent_rule', 100.0)
                
                await update.message.reply_text(result['message'], parse_mode='Markdown')
            else:
                await update.message.reply_text(f"‚ùå {result['error']}")
                
        else:  # expense
            # –ß–ò–°–¢–ê–Ø –í–ê–í–ò–õ–û–ù–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
            result = transaction_service.add_expense(user_id, amount, category, description)
            
            if result['success']:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
                await update_expense_progress(user_id)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
                await check_budget_limit(update, user_id, category, amount)
                
                await update.message.reply_text(result['message'], parse_mode='Markdown')
            else:
                await update.message.reply_text(f"‚ùå {result['error']}")
        
    except Exception as e:
        logger.error(f"Transaction save error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)
    context.user_data.clear()
    return ConversationHandler.END

async def update_expense_progress(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    living_budget = wallet_service.get_wallet_balance(user_id, 'living_budget')  # ‚úÖ –ò–°–ü–†–ê–í–ò–õ–ò
    gold_reserve = wallet_service.get_wallet_balance(user_id, 'gold_reserve')    # ‚úÖ –ò–°–ü–†–ê–í–ò–õ–ò
    total_balance = living_budget + gold_reserve
    
    if total_balance > 0:
        # –ò–¥–µ–∞–ª: living_budget —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 90% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        ideal_ratio = 90.0
        current_ratio = (living_budget / total_balance * 100) if total_balance > 0 else 0
        progress = min(100.0, (current_ratio / ideal_ratio * 100))
        
        babylon_service.update_rule_progress(user_id, 'control_expenses', progress)

async def check_budget_limit(update: Update, user_id: int, category: str, amount: float):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º"""
    budget_check = simple_budget_service.check_spending(user_id, category, amount)
    
    if budget_check.get('has_limit') and budget_check['exceeded']:
        await update.message.reply_text(
            f"‚ö†Ô∏è *–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞!*\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–õ–∏–º–∏—Ç –≤ –º–µ—Å—è—Ü: {budget_check['monthly_limit']:,.0f} —Ä—É–±.\n"
            f"–£–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {budget_check['current_spent']:,.0f} —Ä—É–±.\n"
            f"–ü–æ—Å–ª–µ —Ç—Ä–∞—Ç—ã: {budget_check['total_after_expense']:,.0f} —Ä—É–±.\n"
            f"üìõ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {budget_check['overspend']:,.0f} —Ä—É–±.\n\n"
            f"üí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* \"–ú—É–¥—Ä—ã–π —á–µ–ª–æ–≤–µ–∫ –∑–Ω–∞–µ—Ç –º–µ—Ä—É –≤ —Ä–∞—Å—Ö–æ–¥–∞—Ö\"",
            parse_mode='Markdown'
        )

# ============================================================================
# –ë–´–°–¢–†–´–ô –í–í–û–î - –ß–ò–°–¢–ê–Ø –í–ê–í–ò–õ–û–ù–°–ö–ê–Ø –õ–û–ì–ò–ö–ê
# ============================================================================

async def quick_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —Å —á–∏—Å—Ç–æ–π –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–π –ª–æ–≥–∏–∫–æ–π"""
    text = update.message.text.strip()
    words = text.split()
    
    if len(words) < 2:
        await update.message.reply_text(
            "‚ùå *–§–æ—Ä–º–∞—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞:*\n"
            "`1500 –µ–¥–∞ –æ–±–µ–¥` - —Ä–∞—Å—Ö–æ–¥\n" 
            "`-50000 –∑–∞—Ä–ø–ª–∞—Ç–∞` - –¥–æ—Ö–æ–¥",
            parse_mode='Markdown'
        )
        return
    
    try:
        amount = float(words[0])
        category_word = words[1].lower()
        description = ' '.join(words[2:]) if len(words) > 2 else "–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥"
        
        user_id = update.message.from_user.id
        
        if amount < 0:  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ = –¥–æ—Ö–æ–¥
            amount = abs(amount)
            category = categorize_income(category_word)
            result = transaction_service.add_income(user_id, amount, category, description)
            
            if result['success']:
                babylon_service.update_rule_progress(user_id, '10_percent_rule', 100.0)
                message = result['message']
            else:
                message = f"‚ùå {result['error']}"
                
        else:  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ = —Ä–∞—Å—Ö–æ–¥
            category = categorize_expense(category_word)
            
            # ‚úÖ –î–û–ë–ê–í–ò–õ–ò –ü–†–û–í–ï–†–ö–£ –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–†–ï–î–°–¢–í
            affordability = wallet_service.can_afford_expense(user_id, amount)
            if not affordability['can_afford']:
                await update.message.reply_text(
                    f"üö´ *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –ë—é–¥–∂–µ—Ç–µ –Ω–∞ –∂–∏–∑–Ω—å!*\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {affordability['available']:,.0f} —Ä—É–±.\n"
                    f"–ù—É–∂–Ω–æ: {affordability['needed']:,.0f} —Ä—É–±.",
                    parse_mode='Markdown'
                )
                return
            
            result = transaction_service.add_expense(user_id, amount, category, description)
            
            if result['success']:
                await update_expense_progress(user_id)
                budget_check = simple_budget_service.check_spending(user_id, category, amount)
                
                if budget_check.get('has_limit') and budget_check['exceeded']:
                    message = f"{result['message']}\n\n‚ö†Ô∏è *–ü—Ä–µ–≤—ã—à–µ–Ω –±—é–¥–∂–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!*"
                else:
                    message = result['message']
            else:
                message = f"‚ùå {result['error']}"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!*\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `10000 –∑–∞—Ä–ø–ª–∞—Ç–∞` - –¥–æ—Ö–æ–¥ 10000 —Ä—É–±.\n"
            "‚Ä¢ `1500 –µ–¥–∞ –æ–±–µ–¥` - —Ä–∞—Å—Ö–æ–¥ 1500 —Ä—É–±. –Ω–∞ –µ–¥—É",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Quick input error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –≤–≤–æ–¥–µ.")

# ============================================================================
# CONVERSATION HANDLERS - –£–ü–†–û–©–ï–ù–ù–´–ï
# ============================================================================

def create_transaction_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤"""
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^(üí≥ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥|üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥)$'), 
                          handle_transaction_start)
        ],
        states={
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_handler)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category_handler)],
            DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_transaction),
                CommandHandler('skip', skip_description)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation)],
        allow_reentry=True
    )

# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

async def handle_transaction_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    text = update.message.text
    if text == 'üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥':
        return await add_expense(update, context)
    elif text == 'üí≥ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥':
        return await add_income(update, context)

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_menu_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    'add_income', 'add_expense', 'amount_handler', 'category_handler', 
    'save_transaction', 'quick_input', 'create_transaction_conversation_handler'
]