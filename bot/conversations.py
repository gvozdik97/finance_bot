# finance_bot/bot/conversations.py

import logging
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler

from utils.constants import AMOUNT, CATEGORY, DESCRIPTION, BUDGET_AMOUNT, EDIT_BUDGET_AMOUNT
from utils.validators import validate_amount, validate_budget_amount
from utils.categorizers import clean_category_name, categorize_expense, categorize_income
from utils.formatters import format_transaction_message

from services.transaction_service import transaction_service
from services.budget_service import budget_service

from keyboards.main_menu import get_main_menu_keyboard, get_category_keyboard, remove_keyboard

from .common import show_main_menu, show_main_menu_from_query

logger = logging.getLogger(__name__)

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
# ============================================================================

async def add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    await update.message.reply_text(
        "üí∏ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        parse_mode='Markdown',
        reply_markup=remove_keyboard()
    )
    context.user_data['type'] = 'expense'
    return AMOUNT

async def add_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
    await update.message.reply_text(
        "üí≥ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        parse_mode='Markdown', 
        reply_markup=remove_keyboard()
    )
    context.user_data['type'] = 'income'
    return AMOUNT

async def amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã"""
    is_valid, result = validate_amount(update.message.text)
    
    if not is_valid:
        await update.message.reply_text(result)
        return AMOUNT
    
    amount = result
    context.user_data['amount'] = amount
    
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    transaction_type = context.user_data['type']
    type_text = "—Ä–∞—Å—Ö–æ–¥–∞" if transaction_type == 'expense' else "–¥–æ—Ö–æ–¥–∞"
    
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {type_text}:",
        reply_markup=get_category_keyboard(transaction_type)
    )
    return CATEGORY

async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = clean_category_name(update.message.text)
    context.user_data['category'] = category
    
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=remove_keyboard()
    )
    return DESCRIPTION

async def skip_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è"""
    return await save_transaction(update, context, description="–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")

async def save_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE, description: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    user_data = context.user_data
    
    if description is None:
        description = update.message.text if update.message and update.message.text != '/skip' else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
    
    user_id = update.message.from_user.id
    success = transaction_service.add_transaction(
        user_id=user_id,
        transaction_type=user_data['type'],
        amount=user_data['amount'],
        category=user_data['category'],
        description=description
    )
    
    if success:
        message_text = format_transaction_message(
            user_data['type'], 
            user_data['amount'], 
            user_data['category'], 
            description
        )
        await update.message.reply_text(message_text, parse_mode='Markdown')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        if user_data['type'] == 'expense':
            await check_budget(update, context, user_data['category'], user_data['amount'])
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)
    context.user_data.clear()
    return ConversationHandler.END

async def check_budget(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str, amount: float):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞"""
    user_id = update.message.from_user.id
    budget_check = budget_service.check_budget_exceeded(user_id, category, amount)
    
    if budget_check['exceeded']:
        await update.message.reply_text(
            f"‚ö†Ô∏è *–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞!*\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–õ–∏–º–∏—Ç: {budget_check['budget_amount']:,.0f} —Ä—É–±.\n"
            f"–ë—É–¥–µ—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {budget_check['total_after_transaction']:.0f} —Ä—É–±.\n"
            f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {budget_check['overspend']:.0f} —Ä—É–±.",
            parse_mode='Markdown'
        )

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ë–Æ–î–ñ–ï–¢–û–í
# ============================================================================

async def budget_amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –±—é–¥–∂–µ—Ç–∞"""
    is_valid, result = validate_budget_amount(update.message.text)
    
    if not is_valid:
        await update.message.reply_text(result)
        return BUDGET_AMOUNT
    
    amount = result
    user_id = update.message.from_user.id
    category = context.user_data['budget_category']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—é–¥–∂–µ—Ç
    existing_budget = budget_service.get_budget(user_id, category)
    
    if existing_budget:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä: –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
        from keyboards.budgets_menu import get_overwrite_budget_keyboard
        await update.message.reply_text(
            f"‚ö†Ô∏è –ë—é–¥–∂–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {existing_budget.amount} —Ä—É–±.\n"
            f"‚Ä¢ –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {amount} —Ä—É–±.\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—é–¥–∂–µ—Ç?",
            reply_markup=get_overwrite_budget_keyboard(amount)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
        context.user_data['pending_budget'] = {
            'category': category,
            'amount': amount
        }
        
        return ConversationHandler.END
    
    # –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç–∞ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    success = budget_service.add_budget(user_id, category, amount, 'monthly')
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç: {amount} —Ä—É–±./–º–µ—Å—è—Ü"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—é–¥–∂–µ—Ç–∞.")
    
    await show_main_menu(update, context)
    context.user_data.clear()
    return ConversationHandler.END

async def edit_budget_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_edit":
        await query.message.reply_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    category = query.data.replace('edit_budget_', '')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç
    user_id = query.from_user.id
    budget = budget_service.get_budget(user_id, category)
    
    if not budget:
        await query.message.reply_text("‚ùå –ë—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context
    context.user_data['edit_budget'] = {
        'category': category,
        'current_amount': budget.amount
    }
    
    await query.message.reply_text(
        f"‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞*\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {budget.amount} —Ä—É–±.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –≤ —Ä—É–±–ª—è—Ö:",
        parse_mode='Markdown',
        reply_markup=remove_keyboard()
    )
    
    return EDIT_BUDGET_AMOUNT

async def edit_budget_amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—É–º–º—ã –±—é–¥–∂–µ—Ç–∞"""
    is_valid, result = validate_budget_amount(update.message.text)
    
    if not is_valid:
        await update.message.reply_text(result)
        return EDIT_BUDGET_AMOUNT
    
    new_amount = result
    user_data = context.user_data.get('edit_budget', {})
    category = user_data.get('category')
    current_amount = user_data.get('current_amount')
    
    if not category:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        context.user_data.clear()
        return ConversationHandler.END
    
    user_id = update.message.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç
    success = budget_service.update_budget(user_id, category, new_amount)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –ë—é–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"‚Ä¢ –°—Ç–∞—Ä—ã–π –ª–∏–º–∏—Ç: {current_amount} —Ä—É–±.\n"
            f"‚Ä¢ –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {new_amount} —Ä—É–±.\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {new_amount - current_amount:+.0f} —Ä—É–±."
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞.")
    
    await show_main_menu(update, context)
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_edit_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    await update.message.reply_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# ============================================================================
# –ë–´–°–¢–†–´–ô –í–í–û–î
# ============================================================================

async def quick_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    text = update.message.text
    words = text.split()
    
    try:
        if len(words) >= 2:
            amount = float(words[0])
            category_word = words[1].lower()
            description = ' '.join(words[2:]) if len(words) > 2 else "–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if amount < 0:
                transaction_type = 'income'
                amount = abs(amount)
                category = categorize_income(category_word)
            else:
                transaction_type = 'expense'
                category = categorize_expense(category_word)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            user_id = update.message.from_user.id
            success = transaction_service.add_transaction(
                user_id=user_id,
                transaction_type=transaction_type,
                amount=amount,
                category=category,
                description=description
            )
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
                if transaction_type == 'expense':
                    budget_check = budget_service.check_budget_exceeded(user_id, category, amount)
                    if budget_check['exceeded']:
                        await update.message.reply_text(
                            f"‚ö†Ô∏è *–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞!*\n"
                            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                            f"–õ–∏–º–∏—Ç: {budget_check['budget_amount']:,.0f} —Ä—É–±.\n"
                            f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {budget_check['overspend']:.0f} —Ä—É–±.",
                            parse_mode='Markdown'
                        )
                
                type_text = "–î–æ—Ö–æ–¥" if transaction_type == 'income' else "–†–∞—Å—Ö–æ–¥"
                emoji = "üí≥" if transaction_type == 'income' else "üí∏"
                
                await update.message.reply_text(
                    f"{emoji} *{type_text} –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
                    f"‚Ä¢ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
                    f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {description}",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
                
    except ValueError:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è [–æ–ø–∏—Å–∞–Ω–∏–µ]")

# ============================================================================
# –°–û–ó–î–ê–ù–ò–ï CONVERSATION HANDLERS
# ============================================================================

def create_transaction_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^(üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥|üí≥ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥)$'), 
                          lambda update, context: handle_transaction_start(update, context))
        ],
        states={
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_handler)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category_handler)],
            DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, 
                             lambda update, context: save_transaction(update, context)),
                CommandHandler('skip', skip_description)
            ]
        },
        fallbacks=[],
    )

def create_budget_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–≤"""
    from .budgets_handlers import budget_category_handler
    
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(budget_category_handler, pattern='^budget_cat_')],
        states={
            BUDGET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget_amount_handler)]
        },
        fallbacks=[],
    )

def create_edit_budget_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç ConversationHandler –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–≤"""
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_budget_handler, pattern='^edit_budget_')],
        states={
            EDIT_BUDGET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_budget_amount_handler)]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_edit_handler, pattern='^cancel_edit'),
            CommandHandler('cancel', cancel_edit_command)
        ],
    )

async def handle_transaction_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    text = update.message.text
    if text == 'üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥':
        return await add_expense(update, context)
    elif text == 'üí≥ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥':
        return await add_income(update, context)