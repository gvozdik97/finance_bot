# bot/debt_conversations.py - –í–ê–í–ò–õ–û–ù–°–ö–ò–ï –î–ò–ê–õ–û–ì–ò –ü–û –î–û–õ–ì–ê–ú

import logging
import re
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CommandHandler, filters

from services.debt_service import debt_service
from services.wallet_service import wallet_service
from keyboards.main_menu import get_main_menu_keyboard, remove_keyboard
from .common import show_main_menu

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞
DEBT_CREDITOR, DEBT_AMOUNT, DEBT_INTEREST, DEBT_DUE_DATE = range(4)

async def start_add_debt_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏–π –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    await update.message.reply_text(
        "üèõÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–ª–≥–∞*\n\n"
        "üí° *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–õ—É—á—à–µ –º–∞–ª–µ–Ω—å–∫–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —á–µ–º –±–æ–ª—å—à–æ–π –¥–æ–ª–≥¬ª\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ (–±–∞–Ω–∫, –¥—Ä—É–≥, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è):",
        parse_mode='Markdown',
        reply_markup=remove_keyboard()
    )
    return DEBT_CREDITOR

async def handle_creditor_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞"""
    creditor = update.message.text.strip()
    
    if len(creditor) < 2:
        await update.message.reply_text("‚ùå –ò–º—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return DEBT_CREDITOR
    
    context.user_data['creditor'] = creditor
    
    await update.message.reply_text(
        f"üíº –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞ –¥–ª—è *{creditor}*:\n\n"
        f"–ü—Ä–∏–º–µ—Ä: `50000` –∏–ª–∏ `100000`",
        parse_mode='Markdown'
    )
    return DEBT_AMOUNT

async def handle_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –¥–æ–ª–≥–∞"""
    try:
        amount = float(update.message.text.replace(',', '.'))
        
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return DEBT_AMOUNT
        
        context.user_data['amount'] = amount
        
        await update.message.reply_text(
            "üìà –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É (–∏–ª–∏ 0, –µ—Å–ª–∏ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤):\n\n"
            "–ü—Ä–∏–º–µ—Ä: `15` –¥–ª—è 15% –∏–ª–∏ `0` –¥–ª—è –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ",
            reply_markup=remove_keyboard()
        )
        return DEBT_INTEREST
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: `50000`")
        return DEBT_AMOUNT

async def handle_interest_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏"""
    try:
        interest_rate = float(update.message.text.replace(',', '.'))
        
        if interest_rate < 0:
            await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return DEBT_INTEREST
        
        context.user_data['interest_rate'] = interest_rate
    
        await update.message.reply_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip:\n\n"
            "–ü—Ä–∏–º–µ—Ä: `31.12.2025` –∏–ª–∏ /skip –¥–ª—è —Å—Ä–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            reply_markup=remove_keyboard()
        )
        return DEBT_DUE_DATE
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: `15` –¥–ª—è 15%")
        return DEBT_INTEREST

async def handle_due_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    due_date_text = update.message.text.strip()
    
    if due_date_text == '/skip':
        context.user_data['due_date'] = None
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥
            due_date = datetime.strptime(due_date_text, '%d.%m.%Y')
            context.user_data['due_date'] = due_date
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥\n"
                "–ü—Ä–∏–º–µ—Ä: `31.12.2025` –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
            )
            return DEBT_DUE_DATE
    
    return await save_debt(update, context)

async def skip_due_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    context.user_data['due_date'] = None
    return await save_debt(update, context)

async def save_debt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–ª–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–≤–∏–ª–æ–Ω—Å–∫—É—é –º—É–¥—Ä–æ—Å—Ç—å"""
    user_data = context.user_data
    user_id = update.message.from_user.id
    
    try:
        result = debt_service.add_debt(
            user_id=user_id,
            creditor=user_data['creditor'],
            amount=user_data['amount'],
            interest_rate=user_data.get('interest_rate', 0.0),
            due_date=user_data.get('due_date')
        )
        
        if result['success']:
            await update.message.reply_text(result['message'], parse_mode='Markdown')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∞–≤–∏–ª–∞ "–°–≤–æ–±–æ–¥–∞ –æ—Ç –¥–æ–ª–≥–æ–≤"
            await update_debt_rule_progress(user_id)
            
        else:
            await update.message.reply_text(f"‚ùå {result['error']}")
    
    except Exception as e:
        logger.error(f"Save debt error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–ª–≥–∞.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)
    context.user_data.clear()
    return ConversationHandler.END

async def update_debt_rule_progress(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∞–≤–∏–ª–∞ '–°–≤–æ–±–æ–¥–∞ –æ—Ç –¥–æ–ª–≥–æ–≤'"""
    debts = debt_service.get_active_debts(user_id)
    
    if not debts:
        # –ù–µ—Ç –¥–æ–ª–≥–æ–≤ - –ø—Ä–∞–≤–∏–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ 100%
        from services.babylon_service import babylon_service
        babylon_service.update_rule_progress(user_id, 'debt_free', 100.0)
    else:
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—É–º–º—ã –¥–æ–ª–≥–æ–≤
        total_debt = sum(debt.current_amount for debt in debts)
        # –ß–µ–º –º–µ–Ω—å—à–µ –¥–æ–ª–≥, —Ç–µ–º –≤—ã—à–µ –ø—Ä–æ–≥—Ä–µ—Å—Å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        progress = max(0.0, min(100.0, (1 - (total_debt / (total_debt + 10000))) * 100))
        from services.babylon_service import babylon_service
        babylon_service.update_rule_progress(user_id, 'debt_free', progress)

# ============================================================================
# –ë–´–°–¢–†–´–ô –í–í–û–î –î–û–õ–ì–û–í
# ============================================================================

async def quick_debt_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ –¥–æ–ª–≥–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"""
    text = update.message.text.strip()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω: "–î–æ–ª–≥ –ö—Ä–µ–¥–∏—Ç–æ—Ä –°—É–º–º–∞ [–ü—Ä–æ—Ü–µ–Ω—Ç] [–î–∞—Ç–∞]"
    pattern = r'–¥–æ–ª–≥\s+(\w+)\s+(\d+)(?:\s+(\d+))?(?:\s+(\d{2}\.\d{2}\.\d{4}))?'
    match = re.search(pattern, text.lower())
    
    if not match:
        await update.message.reply_text(
            "‚ùå *–§–æ—Ä–º–∞—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ–ª–≥–∞:*\n"
            "`–¥–æ–ª–≥ –ë–∞–Ω–∫ 50000 15 31.12.2025`\n\n"
            "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –∫—Ä–µ–¥–∏—Ç–æ—Ä –∏ —Å—É–º–º–∞\n"
            "‚Ä¢ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –¥–∞—Ç–∞",
            parse_mode='Markdown'
        )
        return
    
    creditor = match.group(1).title()
    amount = float(match.group(2))
    interest_rate = float(match.group(3)) if match.group(3) else 0.0
    due_date_text = match.group(4)
    
    try:
        due_date = datetime.strptime(due_date_text, '%d.%m.%Y') if due_date_text else None
        
        user_id = update.message.from_user.id
        result = debt_service.add_debt(user_id, creditor, amount, interest_rate, due_date)
        
        if result['success']:
            await update.message.reply_text(result['message'], parse_mode='Markdown')
            await update_debt_rule_progress(user_id)
        else:
            await update.message.reply_text(f"‚ùå {result['error']}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")
    except Exception as e:
        logger.error(f"Quick debt input error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞.")

# ============================================================================
# CONVERSATION HANDLER –î–õ–Ø –î–û–õ–ì–û–í
# ============================================================================

def create_debt_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥$'), start_add_debt_flow)
        ],
        states={
            DEBT_CREDITOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_creditor_input)],
            DEBT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount_input)],
            DEBT_INTEREST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_interest_input)],
            DEBT_DUE_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_due_date_input),
                CommandHandler('skip', skip_due_date)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_debt_conversation)],
        allow_reentry=True
    )

async def cancel_debt_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    await update.message.reply_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

__all__ = [
    'start_add_debt_flow', 'quick_debt_input', 'create_debt_conversation_handler'
]