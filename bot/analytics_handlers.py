# bot/analytics_handlers.py - –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê

import logging
from telegram import Update
from telegram.ext import ContextTypes

from services.financial_analytics import financial_analytics
from utils.financial_charts import financial_charts
from keyboards.analytics_menu import get_analytics_menu_keyboard

logger = logging.getLogger(__name__)

async def show_analytics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    menu_text = """
üìà *–§–ò–ù–ê–ù–°–û–í–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:

üìä *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–±–∑–æ—Ä* - –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –±–∞–ª–∞–Ω—Å—ã
üìà *–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤* - –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º  
üí∞ *–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤* - —Ç—Ä–µ–Ω–¥—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤
üìâ *–ì—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã* - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

üí° *–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π*
"""

    await update.message.reply_text(
        menu_text,
        parse_mode='Markdown',
        reply_markup=get_analytics_menu_keyboard()
    )

async def show_financial_overview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–±–∑–æ—Ä"""
    user_id = update.message.from_user.id
    
    try:
        overview = financial_analytics.get_financial_overview(user_id)
        
        if not overview['success']:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.",
                reply_markup=get_analytics_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±–∑–æ—Ä–∞
        overview_text = "üìä *–§–ò–ù–ê–ù–°–û–í–´–ô –û–ë–ó–û–†*\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        overview_text += f"üíº *–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:* {overview['total_balance']:,.0f} —Ä—É–±.\n"
        overview_text += f"üí∞ *–ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å:* {overview['gold_reserve']:,.0f} —Ä—É–±.\n"
        overview_text += f"üí≥ *–î–æ—Ö–æ–¥—ã (30 –¥–Ω–µ–π):* {overview['monthly_income']:,.0f} —Ä—É–±.\n"
        overview_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã (30 –¥–Ω–µ–π):* {overview['monthly_expenses']:,.0f} —Ä—É–±.\n\n"
        
        # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        overview_text += f"üìà *–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è:* {overview['savings_rate']:.1f}% –æ—Ç –¥–æ—Ö–æ–¥–æ–≤\n"
        overview_text += f"üìâ *–†–∞—Å—Ö–æ–¥—ã:* {overview['expense_ratio']:.1f}% –æ—Ç –¥–æ—Ö–æ–¥–æ–≤\n"
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–æ–∫
        net_flow = overview['net_flow']
        if net_flow > 0:
            overview_text += f"üíé *–ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ç–æ–∫:* +{net_flow:,.0f} —Ä—É–±.\n"
        else:
            overview_text += f"‚ö†Ô∏è *–ß–∏—Å—Ç—ã–π –æ—Ç—Ç–æ–∫:* {net_flow:,.0f} —Ä—É–±.\n"
        
        # –û—Ü–µ–Ω–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        if overview['savings_rate'] >= 10:
            overview_text += "\n‚úÖ *–û—Ç–ª–∏—á–Ω–æ!* –í—ã —Å–æ–±–ª—é–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 10%\n"
        elif overview['savings_rate'] > 0:
            overview_text += f"\nüí° *–°–æ–≤–µ—Ç:* –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 10% –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π\n"
        else:
            overview_text += f"\nüéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –ù–∞—á–Ω–∏—Ç–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å 10% –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞\n"
        
        await update.message.reply_text(
            overview_text,
            parse_mode='Markdown',
            reply_markup=get_analytics_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Financial overview error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–∑–æ—Ä–∞",
            reply_markup=get_analytics_menu_keyboard()
        )

async def show_spending_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        analysis = financial_analytics.get_spending_analysis(user_id)
        
        if not analysis['success'] or analysis['total_expenses'] == 0:
            await update.message.reply_text(
                "üìä *–ê–ù–ê–õ–ò–ó –†–ê–°–•–û–î–û–í*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥.",
                parse_mode='Markdown',
                reply_markup=get_analytics_menu_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        chart = financial_charts.create_spending_by_category(analysis['categories'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f"\nüí∏ *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
        stats_text += f"–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {analysis['total_expenses']:,.0f} —Ä—É–±.\n"
        stats_text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {analysis['category_count']}\n"
        stats_text += f"–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n\n"
        
        # –ò–Ω—Å–∞–π—Ç—ã
        if analysis['category_count'] > 0:
            top_category = analysis['categories'][0]
            if top_category['percentage'] > 50:
                stats_text += f"üí° –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {top_category['name']}\n"
            elif analysis['category_count'] <= 3:
                stats_text += "üí° –†–∞—Å—Ö–æ–¥—ã —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\n"
            else:
                stats_text += "üí° –†–∞—Å—Ö–æ–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ\n"
        
        full_text = chart + stats_text
        
        await update.message.reply_text(
            full_text,
            parse_mode='Markdown',
            reply_markup=get_analytics_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Spending analysis error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Å—Ö–æ–¥–æ–≤",
            reply_markup=get_analytics_menu_keyboard()
        )

async def show_income_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        analysis = financial_analytics.get_income_analysis(user_id)
        
        if not analysis['success'] or analysis['total_income'] == 0:
            await update.message.reply_text(
                "üí∞ *–ê–ù–ê–õ–ò–ó –î–û–•–û–î–û–í*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥.",
                parse_mode='Markdown',
                reply_markup=get_analytics_menu_keyboard()
            )
            return
        
        income_text = "üí∞ *–ê–ù–ê–õ–ò–ó –î–û–•–û–î–û–í*\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        income_text += f"üí≥ *–û–±—â–∞—è —Å—É–º–º–∞:* {analysis['total_income']:,.0f} —Ä—É–±.\n"
        income_text += f"üìÖ *–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:* {analysis['months_analyzed']} –º–µ—Å—è—Ü–µ–≤\n"
        income_text += f"üìà *–¢—Ä–µ–Ω–¥:* {analysis['trend'].capitalize()}\n\n"
        
        # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        if analysis['monthly_income']:
            income_text += "üìä *–ü–û–°–õ–ï–î–ù–ò–ï –ú–ï–°–Ø–¶–´:*\n"
            for month, amount in analysis['monthly_income'][:3]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
                month_name = month[5:7]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
                income_text += f"{month_name}. {amount:,.0f} —Ä—É–±.\n"
            income_text += "\n"
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if analysis['income_by_category']:
            income_text += "üè∑Ô∏è *–ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:*\n"
            for category, amount in analysis['income_by_category'][:4]:  # –¢–æ–ø-4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                percentage = (amount / analysis['total_income'] * 100) if analysis['total_income'] > 0 else 0
                income_text += f"‚Ä¢ {category}: {amount:,.0f} —Ä—É–±. ({percentage:.1f}%)\n"
        
        await update.message.reply_text(
            income_text,
            parse_mode='Markdown',
            reply_markup=get_analytics_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Income analysis error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ—Ö–æ–¥–æ–≤",
            reply_markup=get_analytics_menu_keyboard()
        )

async def show_financial_charts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user_id = update.message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        overview = financial_analytics.get_financial_overview(user_id)
        spending_analysis = financial_analytics.get_spending_analysis(user_id)
        income_analysis = financial_analytics.get_income_analysis(user_id)
        
        charts_text = "üìâ *–ì–†–ê–§–ò–ö–ò –ò –û–¢–ß–ï–¢–´*\n\n"
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥—ã vs —Ä–∞—Å—Ö–æ–¥—ã
        if overview['success'] and overview['monthly_income'] > 0:
            income_vs_expenses = financial_charts.create_income_vs_expenses(
                overview['monthly_income'], 
                overview['monthly_expenses']
            )
            charts_text += income_vs_expenses + "\n\n"
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        if overview['success']:
            savings_chart = financial_charts.create_savings_progress(
                overview['gold_reserve'],
                overview['monthly_income']
            )
            charts_text += savings_chart + "\n\n"
        
        # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        if income_analysis['success'] and income_analysis['monthly_income']:
            trend_chart = financial_charts.create_monthly_trend(income_analysis['monthly_income'])
            charts_text += trend_chart
        
        await update.message.reply_text(
            charts_text,
            parse_mode='Markdown',
            reply_markup=get_analytics_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Financial charts error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤",
            reply_markup=get_analytics_menu_keyboard()
        )

async def handle_analytics_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    text = update.message.text
    
    if text == 'üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–±–∑–æ—Ä':
        await show_financial_overview(update, context)
    elif text == 'üìà –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤':
        await show_spending_analysis(update, context)
    elif text == 'üí∞ –î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤':
        await show_income_analysis(update, context)
    elif text == 'üìâ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã':
        await show_financial_charts(update, context)
    elif text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        from .common import show_main_menu
        await show_main_menu(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞",
            reply_markup=get_analytics_menu_keyboard()
        )