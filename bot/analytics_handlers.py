# bot/analytics_handlers.py - –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–ù–ê–õ–ò–¢–ò–ö–ò

import logging
from telegram import Update
from telegram.ext import ContextTypes

from services.advanced_analytics import advanced_analytics
from utils.babylon_visualizers import babylon_visualizer
from keyboards.main_menu import get_main_menu_keyboard

logger = logging.getLogger(__name__)

async def show_financial_health(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è"""
    user_id = update.message.from_user.id
    
    try:
        health_data = advanced_analytics.calculate_financial_health_score(user_id)
        
        health_text = "üèõÔ∏è *–ò–ù–î–ï–ö–° –§–ò–ù–ê–ù–°–û–í–û–ì–û –ó–î–û–†–û–í–¨–Ø*\n\n"
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        health_text += f"üíé *–û–±—â–∏–π —Å—á–µ—Ç:* {health_data['total_score']}/100\n"
        health_text += f"üìä *–£—Ä–æ–≤–µ–Ω—å:* {health_data['level']}\n\n"
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        health_text += "*–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ü–µ–Ω–∫–∏:*\n"
        for component, score in health_data['components'].items():
            progress_bar = babylon_visualizer.create_progress_bar(score)
            component_name = {
                'rule_10_percent': 'üí∞ –ü—Ä–∞–≤–∏–ª–æ 10%',
                'expense_control': 'üíº –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞—Å—Ö–æ–¥–æ–≤', 
                'debt_freedom': 'üèõÔ∏è –°–≤–æ–±–æ–¥–∞ –æ—Ç –¥–æ–ª–≥–æ–≤',
                'income_stability': 'üìà –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–æ–≤',
                'savings_habit': 'üéØ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏'
            }.get(component, component)
            
            health_text += f"{component_name}: {progress_bar}\n"
        
        health_text += "\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        for recommendation in health_data['recommendations']:
            health_text += f"‚Ä¢ {recommendation}\n"
        
        # –ü–∏—Ä–∞–º–∏–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        pyramid = babylon_visualizer.create_pyramid_chart(
            health_data['total_score'], 
            health_data['components']
        )
        
        await update.message.reply_text(health_text, parse_mode='Markdown')
        await update.message.reply_text(pyramid, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Financial health error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è")

async def show_savings_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    
    try:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–≤–æ–¥ —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        target_amount = 100000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        forecast = advanced_analytics.predict_savings_timeline(user_id, target_amount)
        
        if not forecast['achievable']:
            await update.message.reply_text(forecast['message'])
            return
        
        forecast_text = "üîÆ *–ü–†–û–ì–ù–û–ó –ù–ê–ö–û–ü–õ–ï–ù–ò–ô*\n\n"
        forecast_text += f"üéØ *–¶–µ–ª—å:* {target_amount:,.0f} —Ä—É–±.\n"
        forecast_text += f"üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:* {forecast['current_savings']:,.0f} —Ä—É–±.\n"
        forecast_text += f"üìà *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:* {forecast['monthly_savings']:,.0f} —Ä—É–±.\n\n"
        forecast_text += f"‚è±Ô∏è *–í—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:* {forecast['months_needed']:.1f} –º–µ—Å—è—Ü–µ–≤\n"
        forecast_text += f"üìÖ *–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞:* {forecast['estimated_date']}\n\n"
        forecast_text += f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* {forecast['recommendation']}"
        
        await update.message.reply_text(forecast_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Savings forecast error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")

async def show_spending_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        analysis = advanced_analytics.analyze_spending_patterns(user_id)
        
        if 'error' in analysis:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        analysis_text = "üìä *–ê–ù–ê–õ–ò–ó –í–ê–®–ò–• –†–ê–°–•–û–î–û–í*\n\n"
        analysis_text += f"üí∏ *–í—Å–µ–≥–æ –∑–∞ –º–µ—Å—è—Ü:* {analysis['monthly_total']:,.0f} —Ä—É–±.\n"
        analysis_text += f"üìã *–ö–∞—Ç–µ–≥–æ—Ä–∏–π:* {analysis['total_categories']}\n\n"
        
        analysis_text += "üèÜ *–¢–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n"
        for i, category in enumerate(analysis['top_categories'][:5], 1):
            analysis_text += f"{i}. {category['category']}: {category['amount']:,.0f} —Ä—É–±. ({category['percentage']:.1f}%)\n"
        
        analysis_text += "\nüí° *–ò–Ω—Å–∞–π—Ç—ã:*\n"
        for insight in analysis['insights']:
            analysis_text += f"‚Ä¢ {insight}\n"
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤
        from services.wallet_service import wallet_service
        wallets = wallet_service.get_all_wallets(user_id)
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        river_diagram = babylon_visualizer.create_river_flow_diagram(
            income=100000,  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            expenses=analysis['monthly_total'],
            savings=wallets.get('gold_reserve', 0)
        )
        
        await update.message.reply_text(analysis_text, parse_mode='Markdown')
        await update.message.reply_text(river_diagram, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Spending analysis error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Å—Ö–æ–¥–æ–≤")

async def show_advanced_analytics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    menu_text = """
üìà *–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –í–ê–í–ò–õ–û–ù–ê*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:

üèõÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ - –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π  
üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ - –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∏–Ω—Å–∞–π—Ç—ã
üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

üí° *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –±–æ–≥–∞—Ç—Å—Ç–≤—É¬ª
"""
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await update.message.reply_text(menu_text, parse_mode='Markdown')

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±—É–¥–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ –±–æ—Ç–∞