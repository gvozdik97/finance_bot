# bot/analytics_handlers.py

import logging
from telegram import Update
from telegram.ext import ContextTypes

from services.advanced_analytics import advanced_analytics
from utils.babylon_visualizers import babylon_visualizer
from keyboards.analytics_menu import get_advanced_analytics_menu_keyboard

logger = logging.getLogger(__name__)

async def show_financial_health(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è"""
    user_id = update.message.from_user.id
    
    try:
        health_data = advanced_analytics.calculate_financial_health_score(user_id)
        
        health_text = "*–ò–ù–î–ï–ö–° –§–ò–ù–ê–ù–°–û–í–û–ì–û –ó–î–û–†–û–í–¨–Ø*\n\n"
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        health_text += f"*–û–±—â–∏–π —Å—á–µ—Ç:* {health_data['total_score']}/100\n"
        health_text += f"*–£—Ä–æ–≤–µ–Ω—å:* {health_data['level']}\n\n"
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        health_text += "*–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ü–µ–Ω–∫–∏:*\n"
        for component, score in health_data['components'].items():
            progress_bar = babylon_visualizer.create_progress_bar(score)
            component_name = {
                'rule_10_percent': '–ü—Ä–∞–≤–∏–ª–æ 10%',
                'expense_control': '–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞—Å—Ö–æ–¥–æ–≤', 
                'debt_freedom': '–°–≤–æ–±–æ–¥–∞ –æ—Ç –¥–æ–ª–≥–æ–≤',
                'income_stability': '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–æ–≤',
                'savings_habit': '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏'
            }.get(component, component)
            
            health_text += f"{component_name}: {progress_bar}\n"
        
        health_text += "\n*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        for recommendation in health_data['recommendations']:
            health_text += f"‚Ä¢ {recommendation}\n"
        
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å markdown (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç)
        await update.message.reply_text(health_text, parse_mode='Markdown')
        
        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–∏—Ä–∞–º–∏–¥–∞ –ë–ï–ó markdown
        pyramid = babylon_visualizer.create_financial_pyramid(user_id)
        await update.message.reply_text(pyramid)  # –ë–µ–∑ parse_mode
        
    except Exception as e:
        logger.error(f"Financial health error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è")

async def show_spending_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        analysis = advanced_analytics.analyze_spending_patterns(user_id)
        
        if 'error' in analysis:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        analysis_text = "*–ê–ù–ê–õ–ò–ó –í–ê–®–ò–• –†–ê–°–•–û–î–û–í*\n\n"
        analysis_text += f"*–í—Å–µ–≥–æ –∑–∞ –º–µ—Å—è—Ü:* {analysis['monthly_total']:,.0f} —Ä—É–±.\n"
        analysis_text += f"*–ö–∞—Ç–µ–≥–æ—Ä–∏–π:* {analysis['total_categories']}\n\n"
        
        analysis_text += "*–¢–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n"
        for i, category in enumerate(analysis['top_categories'][:5], 1):
            analysis_text += f"{i}. {category['category']}: {category['amount']:,.0f} —Ä—É–±. ({category['percentage']:.1f}%)\n"
        
        analysis_text += "\n*–ò–Ω—Å–∞–π—Ç—ã:*\n"
        for insight in analysis['insights']:
            analysis_text += f"‚Ä¢ {insight}\n"
        
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å markdown
        await update.message.reply_text(analysis_text, parse_mode='Markdown')
        
        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–∫–∏ –ë–ï–ó markdown
        river_diagram = babylon_visualizer.create_river_of_fortune(user_id)
        await update.message.reply_text(river_diagram)  # –ë–µ–∑ parse_mode
        
    except Exception as e:
        logger.error(f"Spending analysis error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Å—Ö–æ–¥–æ–≤")

async def show_savings_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    
    try:
        target_amount = 100000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        forecast = advanced_analytics.predict_savings_timeline(user_id, target_amount)
        
        if not forecast['achievable']:
            await update.message.reply_text(forecast['message'])
            return
        
        forecast_text = "üîÆ *–ü–†–û–ì–ù–û–ó –ù–ê–ö–û–ü–õ–ï–ù–ò–ô*\n\n"
        forecast_text += f"üéØ *–¶–µ–ª—å:* {target_amount:,.0f} —Ä—É–±.\n"
        forecast_text += f"üí∞ *–¢–µ–∫—É—â–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:* {forecast['current_savings']:,.0f} —Ä—É–±.\n"
        forecast_text += f"üìà *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:* {forecast['monthly_savings']:,.0f} —Ä—É–±.\n\n"
        forecast_text += f"‚è±Ô∏è *–í—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:* {forecast['months_needed']:.1f} –º–µ—Å—è—Ü–µ–≤\n"
        forecast_text += f"üìÖ *–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞:* {forecast['estimated_date']}\n\n"
        forecast_text += f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* {forecast['recommendation']}"
        
        await update.message.reply_text(forecast_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Savings forecast error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")

async def show_personal_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    user_id = update.message.from_user.id
    
    try:
        health_data = advanced_analytics.calculate_financial_health_score(user_id)
        
        rec_text = "üéØ *–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –í–ê–í–ò–õ–û–ù–ê*\n\n"
        rec_text += f"üíé *–í–∞—à —É—Ä–æ–≤–µ–Ω—å:* {health_data['level']}\n"
        rec_text += f"üìä *–û–±—â–∏–π —Å—á–µ—Ç:* {health_data['total_score']}/100\n\n"
        
        rec_text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:*\n"
        for i, recommendation in enumerate(health_data['recommendations'], 1):
            rec_text += f"{i}. {recommendation}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç
        if health_data['components']:
            weakest_component = min(health_data['components'].items(), key=lambda x: x[1])
            rec_text += f"\nüéØ *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:*\n"
            
            if weakest_component[0] == 'rule_10_percent':
                rec_text += "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–∞–≤–∏–ª–µ 10%. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å –∫–∞–∂–¥–æ–≥–æ –¥–æ—Ö–æ–¥–∞."
            elif weakest_component[0] == 'expense_control':
                rec_text += "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã. –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥–¥–µ –º–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å."
            elif weakest_component[0] == 'debt_freedom':
                rec_text += "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–ª–∞–Ω –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤. –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã –ø—Ä–∏–¥–∞—é—Ç —Å–∏–ª!"
            elif weakest_component[0] == 'income_stability':
                rec_text += "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
        
        rec_text += f"\n\nüí™ *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–£–ª—É—á—à–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –∑–∞ —Ä–∞–∑!¬ª"
        
        await update.message.reply_text(rec_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Recommendations error: {e}")
        await update.message.reply_text(
            "üí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
            parse_mode='Markdown'
        )