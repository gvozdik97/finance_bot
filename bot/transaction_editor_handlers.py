# bot/transaction_editor_handlers.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CommandHandler, filters

from services.transaction_editor import transaction_editor
from services.transaction_service import transaction_service
from keyboards.settings_menu import get_edit_transactions_keyboard, get_edit_confirmation_keyboard
from keyboards.main_menu import get_main_menu_keyboard, remove_keyboard
from keyboards.transactions_menu import get_transactions_menu_keyboard
from .common import show_main_menu

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
EDIT_SELECT_TRANSACTION, EDIT_CHOOSE_FIELD, EDIT_AMOUNT, EDIT_CATEGORY, EDIT_DESCRIPTION, EDIT_CONFIRM, DELETE_SELECT, DELETE_CONFIRM = range(30, 38)

def _format_transaction_date(date_value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if isinstance(date_value, str):
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            if 'T' in date_value:
                # –§–æ—Ä–º–∞—Ç ISO: '2024-01-15T10:30:00'
                date_obj = datetime.fromisoformat(date_value.replace('Z', '+00:00'))
            elif ' ' in date_value:
                # –§–æ—Ä–º–∞—Ç SQLite: '2024-01-15 10:30:00'
                date_obj = datetime.strptime(date_value, '%Y-%m-%d %H:%M:%S')
            else:
                # –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                date_obj = datetime.strptime(date_value, '%Y-%m-%d')
        elif isinstance(date_value, datetime):
            # –ï—Å–ª–∏ —É–∂–µ –æ–±—ä–µ–∫—Ç datetime
            date_obj = date_value
        else:
            # –ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            date_obj = datetime.now()
        
        return date_obj.strftime('%d.%m %H:%M')
        
    except Exception as e:
        logger.error(f"Error formatting date {date_value}: {e}")
        return "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

async def show_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    menu_text = """
‚úèÔ∏è *–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô*

–ò—Å–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—à–∏–±–∫–∏ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏—Å—Ç–æ—Ä–∏–µ–π:

‚Ä¢ ‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é - –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é - –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
‚Ä¢ üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞

üí° *–í–∞–∂–Ω–æ:* –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç –±–∞–ª–∞–Ω—Å—ã
"""
    await update.message.reply_text(
        menu_text,
        parse_mode='Markdown',
        reply_markup=get_edit_transactions_keyboard()
    )

async def start_edit_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    user_id = update.message.from_user.id
    transactions = transaction_editor.get_recent_transactions_for_edit(user_id, limit=5)
    
    if not transactions:
        await update.message.reply_text(
            "üì≠ *–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–¥–µ—Å—å.",
            parse_mode='Markdown',
            reply_markup=get_edit_transactions_keyboard()
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['edit_transactions'] = transactions
    
    transactions_text = "üìã *–í–´–ë–ï–†–ò–¢–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø*\n\n"
    
    for i, transaction in enumerate(transactions, 1):
        emoji = "üí≥" if transaction.type == 'income' else "üí∏"
        sign = "+" if transaction.type == 'income' else "-"
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        date_str = _format_transaction_date(transaction.date)
        
        transactions_text += f"{i}. {emoji} {transaction.category}: {sign}{transaction.amount:,.0f} —Ä—É–±.\n"
        transactions_text += f"   üìù {transaction.description}\n"
        transactions_text += f"   üìÖ {date_str}\n\n"
    
    transactions_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
    
    await update.message.reply_text(
        transactions_text,
        parse_mode='Markdown',
        reply_markup=remove_keyboard()
    )
    return EDIT_SELECT_TRANSACTION

async def handle_transaction_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        transaction_number = int(update.message.text)
        transactions = context.user_data.get('edit_transactions', [])
        
        if transaction_number < 1 or transaction_number > len(transactions):
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(transactions)}:"
            )
            return EDIT_SELECT_TRANSACTION
        
        selected_transaction = transactions[transaction_number - 1]
        context.user_data['selected_transaction'] = selected_transaction
        context.user_data['selected_transaction_id'] = selected_transaction.id
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        date_str = _format_transaction_date(selected_transaction.date)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await update.message.reply_text(
            f"‚úèÔ∏è *–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò*\n\n"
            f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction_number}:\n"
            f"‚Ä¢ –¢–∏–ø: {'–¥–æ—Ö–æ–¥' if selected_transaction.type == 'income' else '—Ä–∞—Å—Ö–æ–¥'}\n"
            f"‚Ä¢ –°—É–º–º–∞: {selected_transaction.amount:,.0f} —Ä—É–±.\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_transaction.category}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {selected_transaction.description}\n"
            f"‚Ä¢ –î–∞—Ç–∞: {date_str}\n\n"
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
            f"–í–≤–µ–¥–∏—Ç–µ: `—Å—É–º–º–∞`, `–∫–∞—Ç–µ–≥–æ—Ä–∏—è` –∏–ª–∏ `–æ–ø–∏—Å–∞–Ω–∏–µ`",
            parse_mode='Markdown',
            reply_markup=remove_keyboard()
        )
        return EDIT_CHOOSE_FIELD
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
        )
        return EDIT_SELECT_TRANSACTION

async def handle_field_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field = update.message.text.lower().strip()
    transaction = context.user_data['selected_transaction']
    
    if field == '—Å—É–º–º–∞':
        await update.message.reply_text(
            f"üí∞ *–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–£–ú–ú–´*\n\n"
            f"–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {transaction.amount:,.0f} —Ä—É–±.\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:",
            parse_mode='Markdown',
            reply_markup=remove_keyboard()
        )
        return EDIT_AMOUNT
    
    elif field == '–∫–∞—Ç–µ–≥–æ—Ä–∏—è':
        from keyboards.main_menu import get_category_keyboard
        await update.message.reply_text(
            f"üè∑Ô∏è *–ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò*\n\n"
            f"–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction.category}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode='Markdown',
            reply_markup=get_category_keyboard(transaction.type)
        )
        return EDIT_CATEGORY
    
    elif field == '–æ–ø–∏—Å–∞–Ω–∏–µ':
        await update.message.reply_text(
            f"üìù *–ò–ó–ú–ï–ù–ï–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø*\n\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {transaction.description}\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            parse_mode='Markdown',
            reply_markup=remove_keyboard()
        )
        return EDIT_DESCRIPTION
    
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ: `—Å—É–º–º–∞`, `–∫–∞—Ç–µ–≥–æ—Ä–∏—è` –∏–ª–∏ `–æ–ø–∏—Å–∞–Ω–∏–µ`"
        )
        return EDIT_CHOOSE_FIELD

async def handle_amount_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã"""
    try:
        new_amount = float(update.message.text.replace(',', '.'))
        
        if new_amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return EDIT_AMOUNT
        
        context.user_data['new_amount'] = new_amount
        transaction = context.user_data['selected_transaction']
        
        await update.message.reply_text(
            f"‚úÖ *–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø*\n\n"
            f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∞:\n"
            f"‚Ä¢ –°—Ç–∞—Ä–∞—è —Å—É–º–º–∞: {transaction.amount:,.0f} —Ä—É–±.\n"
            f"‚Ä¢ –ù–æ–≤–∞—è —Å—É–º–º–∞: {new_amount:,.0f} —Ä—É–±.\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {new_amount - transaction.amount:+,.0f} —Ä—É–±.\n\n"
            f"üí° –ë–∞–ª–∞–Ω—Å—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ?",
            parse_mode='Markdown',
            reply_markup=get_edit_confirmation_keyboard()
        )
        return EDIT_CONFIRM
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: `5000`")
        return EDIT_AMOUNT

async def handle_category_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    new_category = update.message.text
    from utils.categorizers import clean_category_name
    new_category = clean_category_name(new_category)
    
    context.user_data['new_category'] = new_category
    transaction = context.user_data['selected_transaction']
    
    await update.message.reply_text(
        f"‚úÖ *–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø*\n\n"
        f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∞:\n"
        f"‚Ä¢ –°—Ç–∞—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction.category}\n"
        f"‚Ä¢ –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {new_category}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ?",
        parse_mode='Markdown',
        reply_markup=get_edit_confirmation_keyboard()
    )
    return EDIT_CONFIRM

async def handle_description_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    new_description = update.message.text
    context.user_data['new_description'] = new_description
    transaction = context.user_data['selected_transaction']
    
    await update.message.reply_text(
        f"‚úÖ *–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø*\n\n"
        f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∞:\n"
        f"‚Ä¢ –°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {transaction.description}\n"
        f"‚Ä¢ –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {new_description}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ?",
        parse_mode='Markdown',
        reply_markup=get_edit_confirmation_keyboard()
    )
    return EDIT_CONFIRM

async def handle_edit_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    response = update.message.text
    
    if response == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'selected_transaction_id' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_edit_transactions_keyboard()
            )
            context.user_data.clear()
            return ConversationHandler.END
        
        user_id = update.message.from_user.id
        transaction_id = context.user_data['selected_transaction_id']
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        changes = {}
        if 'new_amount' in context.user_data:
            changes['new_amount'] = context.user_data['new_amount']
        if 'new_category' in context.user_data:
            changes['new_category'] = context.user_data['new_category']
        if 'new_description' in context.user_data:
            changes['new_description'] = context.user_data['new_description']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        if not changes:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                reply_markup=get_edit_transactions_keyboard()
            )
            context.user_data.clear()
            return ConversationHandler.END
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        result = transaction_editor.edit_transaction(
            user_id, transaction_id,
            new_amount=changes.get('new_amount'),
            new_category=changes.get('new_category'),
            new_description=changes.get('new_description')
        )
        
        if result['success']:
            await update.message.reply_text(
                result['message'],
                parse_mode='Markdown',
                reply_markup=get_edit_transactions_keyboard()
            )
        else:
            await update.message.reply_text(
                f"‚ùå {result['error']}",
                reply_markup=get_edit_transactions_keyboard()
            )
    
    else:  # –û—Ç–º–µ–Ω–∞ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç
        await update.message.reply_text(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_edit_transactions_keyboard()
        )
    
    context.user_data.clear()
    return ConversationHandler.END

async def start_delete_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    user_id = update.message.from_user.id
    transactions = transaction_editor.get_recent_transactions_for_edit(user_id, limit=5)
    
    if not transactions:
        await update.message.reply_text(
            "üì≠ *–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*",
            parse_mode='Markdown',
            reply_markup=get_edit_transactions_keyboard()
        )
        return ConversationHandler.END
    
    context.user_data['delete_transactions'] = transactions
    
    transactions_text = "üóëÔ∏è *–í–´–ë–ï–†–ò–¢–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø*\n\n"
    
    for i, transaction in enumerate(transactions, 1):
        emoji = "üí≥" if transaction.type == 'income' else "üí∏"
        sign = "+" if transaction.type == 'income' else "-"
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        date_str = _format_transaction_date(transaction.date)
        
        transactions_text += f"{i}. {emoji} {transaction.category}: {sign}{transaction.amount:,.0f} —Ä—É–±.\n"
        transactions_text += f"   üìù {transaction.description}\n"
        transactions_text += f"   üìÖ {date_str}\n\n"
    
    transactions_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    await update.message.reply_text(
        transactions_text,
        parse_mode='Markdown',
        reply_markup=remove_keyboard()
    )
    return DELETE_SELECT

async def handle_delete_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        transaction_number = int(update.message.text)
        transactions = context.user_data.get('delete_transactions', [])
        
        if transaction_number < 1 or transaction_number > len(transactions):
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(transactions)}:"
            )
            return DELETE_SELECT
        
        selected_transaction = transactions[transaction_number - 1]
        
        await update.message.reply_text(
            f"‚ö†Ô∏è *–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø*\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?\n\n"
            f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction_number}:\n"
            f"‚Ä¢ –¢–∏–ø: {'–¥–æ—Ö–æ–¥' if selected_transaction.type == 'income' else '—Ä–∞—Å—Ö–æ–¥'}\n"
            f"‚Ä¢ –°—É–º–º–∞: {selected_transaction.amount:,.0f} —Ä—É–±.\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_transaction.category}\n\n"
            f"üí° –ë–∞–ª–∞–Ω—Å—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã",
            parse_mode='Markdown',
            reply_markup=get_edit_confirmation_keyboard()
        )
        
        context.user_data['delete_transaction_id'] = selected_transaction.id
        return DELETE_CONFIRM
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
        )
        return DELETE_SELECT

async def handle_delete_execution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    response = update.message.text
    
    if response == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if 'delete_transaction_id' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_edit_transactions_keyboard()
            )
            context.user_data.clear()
            return ConversationHandler.END
        
        user_id = update.message.from_user.id
        transaction_id = context.user_data['delete_transaction_id']
        
        result = transaction_editor.delete_transaction(user_id, transaction_id)
        
        if result['success']:
            await update.message.reply_text(
                result['message'],
                parse_mode='Markdown',
                reply_markup=get_edit_transactions_keyboard()
            )
        else:
            await update.message.reply_text(
                f"‚ùå {result['error']}",
                reply_markup=get_edit_transactions_keyboard()
            )
    
    else:  # –û—Ç–º–µ–Ω–∞ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç
        await update.message.reply_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_edit_transactions_keyboard()
        )
    
    context.user_data.clear()
    return ConversationHandler.END

async def show_transactions_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    user_id = update.message.from_user.id
    transactions = transaction_service.get_transaction_history(user_id, limit=10)
    
    history_text = "üìã *–ü–û–°–õ–ï–î–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò*\n\n"
    
    if not transactions:
        history_text += "üì≠ –û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç\nüí° –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é!"
    else:
        for i, trans in enumerate(transactions, 1):
            emoji = "üí≥" if trans[0] == 'income' else "üí∏"
            sign = "+" if trans[0] == 'income' else "-"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            date_str = _format_transaction_date(trans[4])
            
            history_text += f"{i}. {emoji} {trans[2]}: {sign}{trans[1]:,.0f} —Ä—É–±.\n"
            history_text += f"   üìù {trans[3]}\n"
            history_text += f"   üìÖ {date_str}\n\n"
    
    await update.message.reply_text(
        history_text,
        parse_mode='Markdown',
        reply_markup=get_edit_transactions_keyboard()
    )

async def handle_edit_menu_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = update.message.text
    
    if text == '‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é':
        return await start_edit_transaction(update, context)
    elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é':
        return await start_delete_transaction(update, context)
    elif text == 'üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π':
        await show_transactions_list(update, context)
    elif text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await show_main_menu(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞",
            reply_markup=get_edit_transactions_keyboard()
        )

async def cancel_edit_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await update.message.reply_text(
        "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_edit_transactions_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

def create_edit_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é$'), start_edit_transaction),
            MessageHandler(filters.Regex('^üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é$'), start_delete_transaction)
        ],
        states={
            EDIT_SELECT_TRANSACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_transaction_selection)],
            EDIT_CHOOSE_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_field_selection)],
            EDIT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount_edit)],
            EDIT_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category_edit)],
            EDIT_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_description_edit)],
            EDIT_CONFIRM: [MessageHandler(filters.Regex(r'^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)$'), handle_edit_confirmation)],
            DELETE_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_delete_selection)],
            DELETE_CONFIRM: [MessageHandler(filters.Regex(r'^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)$'), handle_delete_execution)]
        },
        fallbacks=[CommandHandler('cancel', cancel_edit_conversation)],
        allow_reentry=True
    )