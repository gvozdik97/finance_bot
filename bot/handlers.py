# bot/handlers.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ê–ù–ê–õ–ò–¢–ò–ö–û–ô

import logging
from telegram import Update
from telegram.ext import ContextTypes

from services.wallet_service import wallet_service
from services.babylon_service import babylon_service
from services.transaction_service import transaction_service
from services.simple_budget_service import simple_budget_service
from services.debt_service import debt_service

from keyboards.main_menu import get_main_menu_keyboard, get_analytics_menu_keyboard, remove_keyboard
from .common import show_main_menu
from .analytics_handlers import show_financial_health, show_savings_forecast, show_spending_analysis

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–∏—Å—Ç–æ–µ –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    user = update.message.from_user
    
    wallet_service.init_user_wallets(user.id)
    babylon_service.init_user_rules(user.id)
    
    welcome_text = babylon_service.get_welcome_message()
    
    await update.message.reply_text(
        welcome_text, 
        parse_mode='Markdown', 
        reply_markup=get_main_menu_keyboard()
    )

async def show_wallets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏–µ –∫–æ—à–µ–ª—å–∫–∏"""
    user_id = update.message.from_user.id
    
    try:
        wallets = wallet_service.get_all_wallets(user_id)
        
        wallets_text = "üè¶ *–í–∞—à–∏ –í–∞–≤–∏–ª–æ–Ω—Å–∫–∏–µ –ö–æ—à–µ–ª—å–∫–∏*\n\n"
        
        for wallet_type, balance in wallets.items():
            display_name = wallet_service.get_wallet_display_name(wallet_type)
            wallets_text += f"{display_name}: *{balance:,.0f} —Ä—É–±.*\n"
        
        if wallets['gold_reserve'] > 0:
            wallets_text += f"\nüí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* \"–¢–≤–æ–π –ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å —Ä–∞—Å—Ç–µ—Ç! –ü–æ–º–Ω–∏ –ø—Ä–∞–≤–∏–ª–æ 10%\""
        else:
            wallets_text += f"\nüí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* \"–ù–∞—á–Ω–∏ —Å –º–∞–ª–æ–≥–æ - –æ—Ç–ª–æ–∂–∏ 10% –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞\""
        
        await update.message.reply_text(wallets_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Wallets error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤.")

async def show_simple_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user_id = update.message.from_user.id
    
    try:
        wallets = wallet_service.get_all_wallets(user_id)
        transactions = transaction_service.get_transaction_history(user_id, 50)
        
        if not transactions:
            stats_text = "üìä *–ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–ï—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            await update.message.reply_text(stats_text, parse_mode='Markdown')
            return
        
        income_total = sum(t[1] for t in transactions if t[0] == 'income')
        expense_total = sum(t[1] for t in transactions if t[0] == 'expense')
        gold_reserve_ratio = (wallets['gold_reserve'] / income_total * 100) if income_total > 0 else 0
        
        stats_text = f"""
üìä *–ü—Ä–æ—Å—Ç–∞—è –í–∞–≤–∏–ª–æ–Ω—Å–∫–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è:*
üí∞ –ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å: {wallets['gold_reserve']:,.0f} —Ä—É–±.
üìà –ù–∞–∫–æ–ø–ª–µ–Ω–æ: {gold_reserve_ratio:.1f}% –æ—Ç –¥–æ—Ö–æ–¥–æ–≤

*–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚úÖ –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {income_total:,.0f} —Ä—É–±.
‚ùå –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {expense_total:,.0f} —Ä—É–±.
üíº –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {sum(wallets.values()):,.0f} —Ä—É–±.

*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*
"""
        for i, (t_type, amount, category, desc, date) in enumerate(transactions[:5]):
            emoji = "üí≥" if t_type == 'income' else "üí∏"
            stats_text += f"{emoji} {amount:,.0f} —Ä—É–±. - {category}\n"
        
        if gold_reserve_ratio >= 10:
            stats_text += f"\nüéâ *–û—Ç–ª–∏—á–Ω–æ!* –í—ã —Å–æ–±–ª—é–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 10%!"
        else:
            stats_text += f"\nüí° *–°–æ–≤–µ—Ç:* –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 10% –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –æ—Ç –¥–æ—Ö–æ–¥–æ–≤"
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Stats error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def show_babylon_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –í–∞–≤–∏–ª–æ–Ω–∞"""
    user_id = update.message.from_user.id
    
    try:
        progress = babylon_service.get_user_progress(user_id)
        rules_info = babylon_service.rules
        
        rules_text = "üèõÔ∏è *7 –ü—Ä–∞–≤–∏–ª –ë–æ–≥–∞—Ç—Å—Ç–≤–∞ –∏–∑ –í–∞–≤–∏–ª–æ–Ω–∞*\n\n"
        
        for rule_name, rule_data in rules_info.items():
            current_progress = progress.get(rule_name, 0)
            progress_bar = _create_progress_bar(current_progress)
            
            rules_text += f"{rule_data['emoji']} *{rule_data['name']}*\n"
            rules_text += f"{rule_data['description']}\n"
            rules_text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {current_progress:.0f}%\n\n"
        
        total_progress = sum(progress.values()) / len(progress) if progress else 0
        rules_text += f"üìä *–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:* {total_progress:.0f}%"
        
        quote = babylon_service.get_daily_quote()
        rules_text += f"\n\nüí° {quote}"
        
        await update.message.reply_text(rules_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Rules error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∞–≤–∏–ª.")

async def show_analytics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    menu_text = """
üìà *–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –í–ê–í–ò–õ–û–ù–ê*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:

üèõÔ∏è *–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ* - –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏–º –º–µ—Ä–∫–∞–º
üîÆ *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π* - –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π
üìä *–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤* - –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏* - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è

üí° *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –±–æ–≥–∞—Ç—Å—Ç–≤—É¬ª
"""
    
    await update.message.reply_text(
        menu_text, 
        parse_mode='Markdown',
        reply_markup=get_analytics_menu_keyboard()
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–º–æ—â—å –ø–æ –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–º—É –±–æ—Ç—É"""
    help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –í–∞–≤–∏–ª–æ–Ω—Å–∫–æ–º—É –§–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –ë–æ—Ç—É*

*üèõÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:*
‚Ä¢ –ö–∞–∂–¥—ã–π –¥–æ—Ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 10% (–ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å) –∏ 90% (–ë—é–¥–∂–µ—Ç –Ω–∞ –∂–∏–∑–Ω—å)
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –≤–æ–∑–º–æ–∂–Ω—ã –¢–û–õ–¨–ö–û –∏–∑ –ë—é–¥–∂–µ—Ç–∞ –Ω–∞ –∂–∏–∑–Ω—å (90%)
‚Ä¢ –ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å –ù–ï–î–û–°–¢–£–ü–ï–ù –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤

*üìà –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:*
‚Ä¢ üèõÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ - –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
‚Ä¢ üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π  
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ - —É–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –æ –≤–∞—à–∏—Ö —Ç—Ä–∞—Ç–∞—Ö
‚Ä¢ üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è

*üí° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `10000 –∑–∞—Ä–ø–ª–∞—Ç–∞` - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
‚Ä¢ `1500 –µ–¥–∞ –æ–±–µ–¥` - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
‚Ä¢ `-50000 –∞–≤–∞–Ω—Å` - –¥–æ—Ö–æ–¥ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞)
‚Ä¢ `–¥–æ–ª–≥ –ë–∞–Ω–∫ 50000` - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥

*üíé –ü–æ–º–Ω–∏:* \"–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–ª–∞—Ç–∏ —Å–µ–±–µ - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã\"
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def show_debts_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞–º–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–ª–≥–∏'"""
    user_id = update.message.from_user.id
    debts = debt_service.get_active_debts(user_id)
    
    menu_text = "üèõÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–æ–ª–≥–∞–º–∏*\n\n"
    
    if not debts:
        menu_text += "üéâ *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤!*\n\n"
        menu_text += "üí° *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç –¥–æ–ª–≥–æ–≤ —á–µ–ª–æ–≤–µ–∫ ‚Äî —É–∂–µ –±–æ–≥–∞—á!¬ª"
    else:
        total_debt = sum(debt.current_amount for debt in debts)
        menu_text += f"üìä *–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤:* {total_debt:,.0f} —Ä—É–±.\n"
        menu_text += f"üìã *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–≥–æ–≤:* {len(debts)}\n\n"
        menu_text += "üí° *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:*"
    
    from keyboards.main_menu import get_debt_management_keyboard
    await update.message.reply_text(
        menu_text, 
        parse_mode='Markdown',
        reply_markup=get_debt_management_keyboard()
    )

async def handle_menu_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text
    
    if text == 'üí≥ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥':
        return await add_income(update, context)
    elif text == 'üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥':
        return await add_expense(update, context)
    elif text == 'üè¶ –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏':
        await show_wallets(update, context)
    elif text == 'üìä –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await show_simple_stats(update, context)
    elif text == 'üìà –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞':  # ‚úÖ –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        await show_analytics_menu(update, context)
    elif text == 'üèõÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –í–∞–≤–∏–ª–æ–Ω–∞':
        await show_babylon_rules(update, context)
    elif text == 'üìú –î–æ–ª–≥–∏':
        await show_debts_main_menu(update, context)
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await show_help(update, context)
    else:
        # –ü—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é
        if not text.startswith(('üìú', '‚ûï', 'üí≥', 'üìã', 'üìà', 'üéØ', 'üìä', 'üè†', 'üèõÔ∏è', 'üîÆ')):
            await quick_input(update, context)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–ª–∏ –¥–æ–ª–≥–æ–≤, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
            await update.message.reply_text(
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard()
            )

async def handle_analytics_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    text = update.message.text
    
    if text == 'üèõÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ':
        await show_financial_health(update, context)
    elif text == 'üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π':
        await show_savings_forecast(update, context)
    elif text == 'üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤':
        await show_spending_analysis(update, context)
    elif text == 'üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        await show_personal_recommendations(update, context)
    elif text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await show_main_menu(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.",
            reply_markup=get_analytics_menu_keyboard()
        )

async def show_personal_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    user_id = update.message.from_user.id
    
    try:
        from services.advanced_analytics import advanced_analytics
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ë–ï–ó —Ä–µ–∫—É—Ä—Å–∏–∏
        health_data = advanced_analytics.calculate_financial_health_score(user_id)
        
        rec_text = "üéØ *–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –í–ê–í–ò–õ–û–ù–ê*\n\n"
        rec_text += f"üíé *–í–∞—à —É—Ä–æ–≤–µ–Ω—å:* {health_data['level']}\n"
        rec_text += f"üìä *–û–±—â–∏–π —Å—á–µ—Ç:* {health_data['total_score']}/100\n\n"
        
        rec_text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:*\n"
        for i, recommendation in enumerate(health_data['recommendations'], 1):
            rec_text += f"{i}. {recommendation}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç
        if health_data['components']:
            weakest_component = min(health_data['components'].items(), key=lambda x: x[1])
            rec_text += f"\nüéØ *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:*\n"
            
            if weakest_component[0] == 'rule_10_percent':
                rec_text += "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–∞–≤–∏–ª–µ 10%. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å –∫–∞–∂–¥–æ–≥–æ –¥–æ—Ö–æ–¥–∞."
            elif weakest_component[0] == 'expense_control':
                rec_text += "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã. –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥–¥–µ –º–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å."
            elif weakest_component[0] == 'debt_freedom':
                rec_text += "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–ª–∞–Ω –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤. –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã –ø—Ä–∏–¥–∞—é—Ç —Å–∏–ª!"
            elif weakest_component[0] == 'income_stability':
                rec_text += "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
        
        rec_text += f"\n\nüí™ *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–£–ª—É—á—à–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –∑–∞ —Ä–∞–∑!¬ª"
        
        await update.message.reply_text(rec_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Recommendations error: {e}")
        await update.message.reply_text(
            "üí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
            parse_mode='Markdown'
        )

def _create_progress_bar(progress: float) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = '‚ñà' * int(progress / 10)
    empty = '‚ñë' * (10 - int(progress / 10))
    return f"{filled}{empty}"

from .conversations import add_income, add_expense, quick_input