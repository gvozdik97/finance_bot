# bot/handlers.py - –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò

import logging
from telegram import Update
from telegram.ext import ContextTypes

from services.wallet_service import wallet_service
from services.babylon_service import babylon_service
from services.transaction_service import transaction_service
from services.debt_service import debt_service

from keyboards.main_menu import get_main_menu_keyboard
from keyboards.analytics_menu import get_analytics_menu_keyboard
from .common import show_main_menu
from .analytics_handlers import show_analytics_menu, handle_analytics_commands
from .conversations import add_income, add_expense, quick_input

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–∏—Å—Ç–æ–µ –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    user = update.message.from_user
    
    wallet_service.init_user_wallets(user.id)
    babylon_service.init_user_rules(user.id)
    
    welcome_text = babylon_service.get_welcome_message()
    
    await update.message.reply_text(
        welcome_text, 
        parse_mode='Markdown', 
        reply_markup=get_main_menu_keyboard()
    )

async def show_wallets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–≤–∏–ª–æ–Ω—Å–∫–∏–µ –∫–æ—à–µ–ª—å–∫–∏"""
    user_id = update.message.from_user.id
    
    try:
        wallets = wallet_service.get_all_wallets(user_id)
        
        wallets_text = "üè¶ *–í–∞—à–∏ –í–∞–≤–∏–ª–æ–Ω—Å–∫–∏–µ –ö–æ—à–µ–ª—å–∫–∏*\n\n"
        
        for wallet_type, balance in wallets.items():
            display_name = wallet_service.get_wallet_display_name(wallet_type)
            wallets_text += f"{display_name}: *{balance:,.0f} —Ä—É–±.*\n"
        
        if wallets['gold_reserve'] > 0:
            wallets_text += f"\nüí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* \"–¢–≤–æ–π –ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å —Ä–∞—Å—Ç–µ—Ç! –ü–æ–º–Ω–∏ –ø—Ä–∞–≤–∏–ª–æ 10%\""
        else:
            wallets_text += f"\nüí° *–°–æ–≤–µ—Ç –í–∞–≤–∏–ª–æ–Ω–∞:* \"–ù–∞—á–Ω–∏ —Å –º–∞–ª–æ–≥–æ - –æ—Ç–ª–æ–∂–∏ 10% –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞\""
        
        await update.message.reply_text(wallets_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Wallets error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤.")

async def show_babylon_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –í–∞–≤–∏–ª–æ–Ω–∞"""
    user_id = update.message.from_user.id
    
    try:
        progress = babylon_service.get_user_progress(user_id)
        rules_info = babylon_service.rules
        
        rules_text = "üèõÔ∏è *7 –ü—Ä–∞–≤–∏–ª –ë–æ–≥–∞—Ç—Å—Ç–≤–∞ –∏–∑ –í–∞–≤–∏–ª–æ–Ω–∞*\n\n"
        
        for rule_name, rule_data in rules_info.items():
            current_progress = progress.get(rule_name, 0)
            progress_bar = _create_progress_bar(current_progress)
            
            rules_text += f"{rule_data['emoji']} *{rule_data['name']}*\n"
            rules_text += f"{rule_data['description']}\n"
            rules_text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {current_progress:.0f}%\n\n"
        
        total_progress = sum(progress.values()) / len(progress) if progress else 0
        rules_text += f"üìä *–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:* {total_progress:.0f}%"
        
        quote = babylon_service.get_daily_quote()
        rules_text += f"\n\nüí° {quote}"
        
        await update.message.reply_text(rules_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Rules error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∞–≤–∏–ª.")

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–º–æ—â—å –ø–æ –≤–∞–≤–∏–ª–æ–Ω—Å–∫–æ–º—É –±–æ—Ç—É"""
    help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –í–∞–≤–∏–ª–æ–Ω—Å–∫–æ–º—É –§–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –ë–æ—Ç—É*

*üèõÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:*
‚Ä¢ –ö–∞–∂–¥—ã–π –¥–æ—Ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 10% (–ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å) –∏ 90% (–ë—é–¥–∂–µ—Ç –Ω–∞ –∂–∏–∑–Ω—å)
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –≤–æ–∑–º–æ–∂–Ω—ã –¢–û–õ–¨–ö–û –∏–∑ –ë—é–¥–∂–µ—Ç–∞ –Ω–∞ –∂–∏–∑–Ω—å (90%)
‚Ä¢ –ó–æ–ª–æ—Ç–æ–π –∑–∞–ø–∞—Å –ù–ï–î–û–°–¢–£–ü–ï–ù –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤

*üìà –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:*
‚Ä¢ üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–±–∑–æ—Ä - –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –±–∞–ª–∞–Ω—Å—ã
‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ - –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ üí∞ –î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ - —Ç—Ä–µ–Ω–¥—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤
‚Ä¢ üìâ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

*üí° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `10000 –∑–∞—Ä–ø–ª–∞—Ç–∞` - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
‚Ä¢ `1500 –µ–¥–∞ –æ–±–µ–¥` - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
‚Ä¢ `-50000 –∞–≤–∞–Ω—Å` - –¥–æ—Ö–æ–¥ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞)
‚Ä¢ `–¥–æ–ª–≥ –ë–∞–Ω–∫ 50000` - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥

*üíé –ü–æ–º–Ω–∏:* \"–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–ª–∞—Ç–∏ —Å–µ–±–µ - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã\"
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def show_debts_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞–º–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–ª–≥–∏'"""
    user_id = update.message.from_user.id
    debts = debt_service.get_active_debts(user_id)
    
    menu_text = "üèõÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–æ–ª–≥–∞–º–∏*\n\n"
    
    if not debts:
        menu_text += "üéâ *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤!*\n\n"
        menu_text += "üí° *–ú—É–¥—Ä–æ—Å—Ç—å –í–∞–≤–∏–ª–æ–Ω–∞:* ¬´–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç –¥–æ–ª–≥–æ–≤ —á–µ–ª–æ–≤–µ–∫ ‚Äî —É–∂–µ –±–æ–≥–∞—á!¬ª"
    else:
        total_debt = sum(debt.current_amount for debt in debts)
        menu_text += f"üìä *–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤:* {total_debt:,.0f} —Ä—É–±.\n"
        menu_text += f"üìã *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–≥–æ–≤:* {len(debts)}\n\n"
        menu_text += "üí° *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:*"
    
    from keyboards.main_menu import get_debt_management_keyboard
    await update.message.reply_text(
        menu_text, 
        parse_mode='Markdown',
        reply_markup=get_debt_management_keyboard()
    )

async def handle_menu_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text
    
    if text == 'üí≥ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥':
        return await add_income(update, context)
    elif text == 'üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥':
        return await add_expense(update, context)
    elif text == 'üè¶ –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏':
        await show_wallets(update, context)
    elif text == 'üìà –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞':  # ‚Üê –ò–ó–ú–ï–ù–ò–õ–ò –ù–ê–ó–í–ê–ù–ò–ï
        await show_analytics_menu(update, context)  # ‚Üê –ü–ï–†–ï–ù–û–°–ò–ú –°–Æ–î–ê
    elif text == 'üèõÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –í–∞–≤–∏–ª–æ–Ω–∞':
        await show_babylon_rules(update, context)
    elif text == 'üìú –î–æ–ª–≥–∏':
        await show_debts_main_menu(update, context)
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await show_help(update, context)
    else:
        # –ü—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é
        if not text.startswith(('üìú', '‚ûï', 'üí≥', 'üìã', 'üìà', 'üéØ', 'üìä', 'üè†', 'üèõÔ∏è', 'üîÆ', 'üí∞', 'üìâ')):
            await quick_input(update, context)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–ª–∏ –¥–æ–ª–≥–æ–≤, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
            await update.message.reply_text(
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard()
            )

def _create_progress_bar(progress: float) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = '‚ñà' * int(progress / 10)
    empty = '‚ñë' * (10 - int(progress / 10))
    return f"{filled}{empty}"