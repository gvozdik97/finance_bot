# finance_bot/bot/handlers.py

import logging
from telegram import Update
from telegram.ext import ContextTypes

from utils.constants import AMOUNT
from keyboards.main_menu import get_main_menu_keyboard, remove_keyboard
from services.budget_service import budget_service
from services.export_service import export_service
from services.analytics_service import analytics_service

from .common import show_main_menu, show_main_menu_from_query

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    welcome_text = f"""
üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

*üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥* - –í–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É
*üí≥ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥* - –í–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥  
*üìä –û—Ç—á–µ—Ç—ã* - –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
*üí∞ –ë—é–¥–∂–µ—Ç—ã* - –ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–æ–≤
*üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
*üì§ –≠–∫—Å–ø–æ—Ä—Ç* - –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel

*–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥:* "1500 –µ–¥–∞ –æ–±–µ–¥" –∏–ª–∏ "-50000 –∑–∞—Ä–ø–ª–∞—Ç–∞"
"""
    await update.message.reply_text(welcome_text, parse_mode='Markdown', 
                                  reply_markup=get_main_menu_keyboard())

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.message.from_user.id
    
    try:
        stats = analytics_service.get_detailed_stats(user_id)
        
        if not stats['all_time']['income'] and not stats['all_time']['expense']:
            await update.message.reply_text("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", parse_mode='Markdown')
            return
        
        stats_text = f"""
üìà *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:*
‚úÖ –î–æ—Ö–æ–¥—ã: {stats['monthly']['income']:,.0f} —Ä—É–±.
‚ùå –†–∞—Å—Ö–æ–¥—ã: {stats['monthly']['expense']:,.0f} —Ä—É–±.
üí∞ –ú–∞—Ä–∂–∞: {stats['monthly']['margin']:,.0f} —Ä—É–±.

*–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:*
‚úÖ –û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: {stats['all_time']['income']:,.0f} —Ä—É–±.
‚ùå –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {stats['all_time']['expense']:,.0f} —Ä—É–±.
üí∞ –û–±—â–∞—è –º–∞—Ä–∂–∞: {stats['all_time']['margin']:,.0f} —Ä—É–±.

*–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:*
"""
        total_expenses = stats['total_expenses']
        for category, amount in stats['top_expenses'].items():
            percent = (amount / total_expenses * 100) if total_expenses > 0 else 0
            stats_text += f"‚Ä¢ {category}: {amount:,.0f} —Ä—É–±. ({percent:.1f}%)\n"
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Stats error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel"""
    user_id = update.message.from_user.id
    
    try:
        filename = export_service.export_to_excel(user_id)
        
        if not filename:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return
        
        await update.message.reply_document(
            document=open(filename, 'rb'),
            filename='finance_export.xlsx'
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        export_service.cleanup_file(filename)
        
    except Exception as e:
        logger.error(f"Export error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ - –í–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É
‚Ä¢ üí≥ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ - –í–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥
‚Ä¢ üìä –û—Ç—á–µ—Ç—ã - –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç—ã - –ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–æ–≤
‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç - –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel

*–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥:*
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`1500 –µ–¥–∞ –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ` - —Ä–∞—Å—Ö–æ–¥
`-50000 –∑–∞—Ä–ø–ª–∞—Ç–∞` - –¥–æ—Ö–æ–¥ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞)

*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:*
üçé –ï–¥–∞, üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, üè† –ö–æ–º–º—É–Ω–∞–ª–∫–∞, üëï –û–¥–µ–∂–¥–∞, üè• –ó–¥–æ—Ä–æ–≤—å–µ, üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def handle_menu_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text
    
    if text == 'üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥':
        return await add_expense(update, context)
    elif text == 'üí≥ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥':
        return await add_income(update, context)
    elif text == 'üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞':
        await show_reports(update, context)
    elif text == 'üí∞ –ë—é–¥–∂–µ—Ç—ã':
        await show_budgets_menu(update, context)
    elif text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await show_stats(update, context)
    elif text == 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö':
        await export_data(update, context)
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await show_help(update, context)
    else:
        await quick_input(update, context)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
from .reports_handlers import show_reports
from .budgets_handlers import show_budgets_menu
from .conversations import add_expense, add_income, quick_input