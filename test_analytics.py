# test_phase3_complete.py - –ü–û–õ–ù–´–ô –¢–ï–°–¢ –§–ê–ó–´ 3

import sys
import os
sys.path.append(os.path.dirname(__file__))

def test_phase3_complete():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –§–∞–∑—ã 3"""
    print("üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ó–´ 3")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 99999
    
    try:
        from services.wallet_service import wallet_service
        from services.transaction_service import transaction_service
        from services.advanced_analytics import advanced_analytics
        from services.trend_analyzer import trend_analyzer
        from utils.babylon_visualizers import babylon_visualizer
        
        print("1. üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏
        wallet_service.init_user_wallets(test_user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_service.add_income(test_user_id, 50000, "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–¢–µ—Å—Ç –§–∞–∑—ã 3")
        transaction_service.add_expense(test_user_id, 15000, "–ï–¥–∞", "–¢–µ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤")
        transaction_service.add_income(test_user_id, 30000, "–§—Ä–∏–ª–∞–Ω—Å", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥")
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        print("\n2. üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        
        # –¢–µ—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        health = advanced_analytics.calculate_financial_health_score(test_user_id)
        print(f"   ‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {health['total_score']}/100 - {health['level']}")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        forecast = advanced_analytics.predict_savings_timeline(test_user_id, 100000)
        print(f"   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π: {forecast['achievable']}")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        analysis = advanced_analytics.analyze_spending_patterns(test_user_id)
        print(f"   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤: {analysis['total_categories']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        print("\n3. üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤...")
        
        # –¢–µ—Å—Ç —Ç—Ä–µ–Ω–¥–æ–≤ –¥–æ—Ö–æ–¥–æ–≤
        trends = trend_analyzer.analyze_income_trends(test_user_id)
        if trends['has_data']:
            print(f"   ‚Ä¢ –¢—Ä–µ–Ω–¥ –¥–æ—Ö–æ–¥–æ–≤: {trends['trend_direction']}")
        
        # –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤
        patterns = trend_analyzer.analyze_expense_patterns(test_user_id)
        if patterns['has_data']:
            print(f"   ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å—Ö–æ–¥–æ–≤: {patterns['total_categories']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        print("\n4. üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
        
        # –¢–µ—Å—Ç –ø–∏—Ä–∞–º–∏–¥—ã
        pyramid = babylon_visualizer.create_financial_pyramid(test_user_id)
        print("   ‚Ä¢ –ü–∏—Ä–∞–º–∏–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: ‚úÖ")
        
        # –¢–µ—Å—Ç —Ö—Ä–∞–º–∞
        temple = babylon_visualizer.create_wealth_temple(test_user_id)
        print("   ‚Ä¢ –•—Ä–∞–º –±–æ–≥–∞—Ç—Å—Ç–≤–∞: ‚úÖ")
        
        # –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞
        report = babylon_visualizer.create_monthly_report(test_user_id)
        print("   ‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç: ‚úÖ")
        
        print("\n5. üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º...")
        
        # –¢–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        empty_user_id = 88888
        empty_health = advanced_analytics.calculate_financial_health_score(empty_user_id)
        print(f"   ‚Ä¢ –ü—É—Å—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {empty_health['total_score']}/100")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –§–ê–ó–´ 3 –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        print("\nüìã –ò–¢–û–ì–ò –§–ê–ó–´ 3:")
        print("   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
        print("   ‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤") 
        print("   ‚úÖ –í–∞–≤–∏–ª–æ–Ω—Å–∫–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        print("   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print("   ‚úÖ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –æ—à–∏–±–∫–∞–º")
        print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_phase3_complete()