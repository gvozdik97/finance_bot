# test_analytics_fixed.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢

import sys
import os
sys.path.append(os.path.dirname(__file__))

from services.advanced_analytics import advanced_analytics
from services.wallet_service import wallet_service
from services.transaction_service import transaction_service
from database.connection import db_connection

def test_analytics_fixed():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –í–∞–≤–∏–ª–æ–Ω–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 99999
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        wallet_service.init_user_wallets(test_user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Ö–æ–¥ (–±—É–¥–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω 10%/90%)
        transaction_service.add_income(test_user_id, 50000, "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Ö–æ–¥")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
        transaction_service.add_expense(test_user_id, 15000, "–ï–¥–∞", "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥")
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –¢–µ—Å—Ç 1: –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
        print("\n1. üìä –¢–µ—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è...")
        health_data = advanced_analytics.calculate_financial_health_score(test_user_id)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {health_data['total_score']}/100")
        print(f"   –£—Ä–æ–≤–µ–Ω—å: {health_data['level']}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(health_data['recommendations'])}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        print("\n2. üîÆ –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π...")
        forecast = advanced_analytics.predict_savings_timeline(test_user_id, 100000)
        print(f"   –î–æ—Å—Ç–∏–∂–∏–º–æ: {forecast['achievable']}")
        if forecast['achievable']:
            print(f"   –ú–µ—Å—è—Ü–µ–≤: {forecast['months_needed']:.1f}")
        
        # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
        print("\n3. üìä –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤...")
        analysis = advanced_analytics.analyze_spending_patterns(test_user_id)
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {analysis.get('total_categories', 0)}")
        print(f"   –ò–Ω—Å–∞–π—Ç—ã: {analysis.get('insights', [])}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –†–µ–∫—É—Ä—Å–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_analytics_fixed()